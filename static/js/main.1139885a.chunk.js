(window.webpackJsonpdigitaltwin=window.webpackJsonpdigitaltwin||[]).push([[0],{12:function(n,e,t){n.exports=t.p+"static/media/bumpmap.d444e896.jpg"},16:function(n,e,t){n.exports=t.p+"static/media/alpha.1c841c4c.jpg"},21:function(n,e,t){n.exports=t.p+"static/media/alpha2.3c2e863c.jpg"},23:function(n,e,t){n.exports=t(32)},28:function(n,e,t){},29:function(n,e,t){},31:function(n,e,t){n.exports=t.p+"static/media/test.b6ffa233.jpg"},32:function(n,e,t){"use strict";t.r(e);var a=t(9),i=t.n(a),r=t(20),o=t.n(r),l=(t(28),t(29),t(0)),u=(t(30),t(18)),s=t(17),c=t(2);function d(n,e,t,a){u.a.call(this),this.type="PlaneGeometry",this.parameters={width:n,height:e,widthSegments:t,heightSegments:a},this.fromBufferGeometry(new f(n,e,t,a)),this.mergeVertices()}function f(n,e,t,a,i,r,o){s.a.call(this),this.type="PlaneBufferGeometry",this.parameters={width:n,height:e,widthSegments:t,heightSegments:a};var l,u,d=(n=n||1)/2,f=(e=e||1)/2,v=Math.floor(t)||1,m=Math.floor(a)||1,p=v+1,g=m+1,h=n/v,w=e/m,_=[],b=[],x=[],y=[];for(u=0;u<g;u++){var R=u*w-f;for(l=0;l<p;l++){var C,S=l*h-d;b.push(S,-R,0),x.push(0,0,1),r%2!=0&&o.useOffset?(C=l/v*i+r*i-i,o.mirrorOffset&&(C=r*i-l/v*i)):C=l/v*i+r*i,o.mirror&&(C=1-C),r%2==0&&o.mirrorHalf&&(C=1-C),y.push(C),y.push(1-u/m)}}for(u=0;u<m;u++)for(l=0;l<v;l++){var T=l+p*u,D=l+p*(u+1),E=l+1+p*(u+1),F=l+1+p*u;_.push(T,D,F),_.push(D,E,F)}this.setIndex(_),this.addAttribute("position",new c.b(b,3)),this.addAttribute("normal",new c.b(x,3)),this.addAttribute("uv",new c.b(y,2))}d.prototype=Object.create(u.a.prototype),d.prototype.constructor=d,f.prototype=Object.create(s.a.prototype),f.prototype.constructor=f;var v=t(14),m="\n#define STANDARD\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n//BIRGITTE\n\nvarying vec3 lightDir;\nvarying vec3 viewDir;\nuniform float time;\n\n//END BIRGITTE\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n\t#ifdef USE_TANGENT\n\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\n\t#endif\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t//BIRGITTE\n\tvec3 lightPos = vec3(0.0,0.0,1.0);\n\tvec3 eyePos = vec3(0.0,0.0,1.0);//(viewMatrix * vec4(0.0,0.0,1.0,1.0)).xyz;//cameraPosition;//viewMatrix * vec4(cameraPosition,1.0)).xyz;\n\n\tvec3 viewPos = gl_Position.xyz;\n\tvec3 L = normalize(lightPos - viewPos);\n\tvec3 V = normalize(eyePos- viewPos);\n\tlightDir = L;\n\tviewDir = V;\n\t//END BIRGITTE\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",p="\n#define STANDARD\n\n//BIRGITTE UNIFORMS\n\n//Blur\nuniform float blurRadius1;\nuniform float blurRadius2;\nuniform vec2 blurRes1;\nuniform vec2 blurRes2;\n\n//Stripes\nuniform float size;\nuniform bool useOffset;\n\n//Animation\nuniform float time;\nuniform bool playWave;\nuniform float waveSpeed;\nuniform float waveFrequency;\nuniform vec2 waveSize;\n\n//Rainbow\nuniform vec3 rainbow1Dir;\nuniform vec3 rainbow2Dir;\nvarying vec3 lightDir;\nvarying vec3 viewDir;\n\n//END BIRGITTE UNIFORMS\n\n//BIRGITTE METHODS\n\nvec3 bump3y (vec3 x, vec3 yoffset)\n{\n\tvec3 y = vec3(1.,1.,1.) - x * x;\n\ty = saturate(y-yoffset);\n\treturn y;\n}\n\nvec3 spectral_zucconi (float w)\n{\n\t\t// w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 cs = vec3(3.54541723, 2.86670055, 2.29421995);\n\tconst vec3 xs = vec3(0.69548916, 0.49416934, 0.28269708);\n\tconst vec3 ys = vec3(0.02320775, 0.15936245, 0.53520021);\n\n\treturn bump3y (\tcs * (x - xs), ys);\n}\n\n// --- Spectral Zucconi 6 --------------------------------------------\n\n// Based on GPU Gems\n// Optimised by Alan Zucconi\nvec3 spectral_zucconi6 (float w)\n{\n\t// w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 c1 = vec3(3.54585104, 2.93225262, 2.41593945);\n\tconst vec3 x1 = vec3(0.69549072, 0.49228336, 0.27699880);\n\tconst vec3 y1 = vec3(0.02312639, 0.15225084, 0.52607955);\n\n\tconst vec3 c2 = vec3(3.90307140, 3.21182957, 3.96587128);\n\tconst vec3 x2 = vec3(0.11748627, 0.86755042, 0.66077860);\n\tconst vec3 y2 = vec3(0.84897130, 0.88445281, 0.73949448);\n\n\treturn\n\t\tbump3y(c1 * (x - x1), y1) +\n\t\tbump3y(c2 * (x - x2), y2) ;\n}\n\n//START BLUR\n\nvec4 blur(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n\tvec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353) * direction;\n  vec2 off2 = vec2(3.2941176470588234) * direction;\n  vec2 off3 = vec2(5.176470588235294) * direction;\n  color += texture2D(image, uv) * 0.1964825501511404;\n  color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\n  color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\n  color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\n  color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\n  color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\n  color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\n  return color;\n}\n\nvec4 textureWithBlur( bool isMaterial2, vec2 vUv3, sampler2D map){\n\tfloat blurRadius;\n\tvec2 blurRes;\n\tif(isMaterial2){\n\t\tblurRadius = blurRadius2;\n\t\tblurRes = blurRes2;\n\t} else{\n\t\tblurRadius = blurRadius1;\n\t\tblurRes = blurRes1;\n\t}\n\tvec4 texelColor;\n\tif(blurRadius > 0.0){\n\t\tvec4 texelColor1 =  blur(map, vUv3, blurRes, vec2(blurRadius, 0.0));\n\t\tvec4 texelColor2 =  blur(map, vUv3, blurRes, vec2(0.0, blurRadius));\n\t\ttexelColor = (texelColor1 + texelColor2)/2.0;\n\t}else{\n\t\ttexelColor = texture2D( map, vUv3 );\n\t}\n\ttexelColor = mapTexelToLinear( texelColor );\n\treturn texelColor;\n}\n\n//END BLUR\n\nvec2 sineWave(vec2 uv, vec2 phase){\n\tfloat x = sin( waveFrequency*uv.y + waveFrequency*uv.x + 6.28*phase.x) * waveSize.x;\n\tfloat y = cos( waveFrequency*uv.y + waveFrequency*uv.x + 6.28*phase.y) * waveSize.y;\n\treturn vec2(uv.x+x, uv.y+y);\n}\n\nvec2 calculateNewUvs(vec2 vUv, bool isMaterial2){\n\tvec2 vUv3 = vUv;\n\tif( isMaterial2 ){\n\t\tif(useOffset){\n\t\t\tvUv3.x -= 0.01 * size;\n\t\t}\n\t}\n\telse{\n\t\tif(playWave){\n\t\t\tvUv3 = sineWave(vUv3, vec2(time* waveSpeed,0.0));\n\t\t}\n\t}\n\treturn vUv3;\n}\n\nvec3 calculateRainbow(vec3 uv_tangent){\n\tfloat d = 2400.0; //nm\n\n\tvec3 L = lightDir;\n\tvec3 V = viewDir;\n\n\tvec3 H = L + V;\n\tfloat u = abs(dot(uv_tangent, H));\n\n\tif(u > 0.0){\n\t\t// Calculates the reflection color\n\t\tvec3 reflectionColor = vec3(0.0,0.0,0.0);\n\t\tfor (float n = 1.0; n <= 8.0; n++){\n\t\t\tfloat wavelength = u * d / n;\n\t\t\treflectionColor += spectral_zucconi(wavelength);\n\t\t}\n\t\treflectionColor = saturate(reflectionColor)*(1.0-u);\n\t\treturn reflectionColor;\n\t}\n\treturn vec3(0.0,0.0,0.0);\n}\n\n//END BIRGITTE METHODS\n\n\n\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\t//BIRGITTE\n\tfloat nCols = 100.0/size;\n\tbool isMaterial2 = mod(ceil(vUv.x * nCols),2.0) == 0.0;\n\tvec2 vUv3 = calculateNewUvs(vUv,isMaterial2);\n\t//END BIRGITTE\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\n\t//BIRGITTE\n\tvec4 texelColor = textureWithBlur(isMaterial2, vUv3, map);\n\tdiffuseColor *= texelColor;\n\t//END BIRGITTE\n\n\t#include <color_fragment>\n\n\t//BIRGITTE\n\n\tvec3 reflectionColor;\n\tif(isMaterial2) {\n\t\treflectionColor = calculateRainbow(rainbow2Dir);\n\t}else{\n\t\treflectionColor = calculateRainbow(rainbow1Dir);\n\t}\n\tdiffuseColor.rgb = diffuseColor.rgb + reflectionColor;\n\n\t//END BIRGITTE\n\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t// this is a stub for the transparency model\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",g=(t(31),t(12)),h=t.n(g),w=t(16),_=t.n(w),b=t(21),x=t.n(b),y=t(22);v.a.prototype.removeFolder=function(n){var e=this.__folders[n];e&&(e.close(),this.__ul.removeChild(e.domElement.parentNode),delete this.__folders[n],this.onResize())};var R,C,S,T={useOffset:!0,stripes:0,metalness:1,roughness:.4,ambientIntensity:.2,aoMapIntensity:1,envMapIntensity:1,displacementScale:.1,normalScale:0,color1:16777215,playWave:!1,waveSpeed:1,waveSizeX:0,waveSizeY:0,waveFrequency:1,rainbowX:0,rainbowY:0,rainbowZ:0,blurRadius:0,blurResX:0,blurResY:0},D={color1:16777215,rainbowX:0,rainbowY:0,rainbowZ:0,blurRadius:0,blurResX:0,blurResY:0},E=function n(e,t,a,i){Object(y.a)(this,n),a.removeFolder(i),this.mainFolder=a.addFolder(i),this.mainFolder.add(T,"stripes",0,10).onChange((function(){return t.uniforms.size.value=T.stripes})),this.mainFolder.add(T,"useOffset").onChange((function(){return t.uniforms.useOffset.value=T.useOffset})),this.mainFolder.add(T,"metalness").min(0).max(1).onChange((function(n){e.metalness=n})),this.mainFolder.add(T,"roughness").min(0).max(1).onChange((function(n){e.roughness=n})),this.mainFolder.add(T,"displacementScale").min(0).max(3).onChange((function(n){e.displacementScale=n})),this.mainFolder.add(T,"normalScale").min(-1).max(1).onChange((function(n){e.normalScale.set(1,-1).multiplyScalar(n)})),this.mainFolder.addColor(T,"color1").onChange((function(){return e.color.setHex(T.color1)})),this.mainFolder.add(T,"playWave").onChange((function(){return t.uniforms.playWave.value=T.playWave})),this.mainFolder.add(T,"waveSpeed",0,5).onChange((function(){return t.uniforms.waveSpeed.value=T.waveSpeed})),this.mainFolder.add(T,"waveFrequency",0,100).onChange((function(){return t.uniforms.waveFrequency.value=T.waveFrequency})),this.mainFolder.add(T,"waveSizeX",0,.1).onChange((function(){return t.uniforms.waveSize.value.x=T.waveSizeX})),this.mainFolder.add(T,"waveSizeY",0,.1).onChange((function(){return t.uniforms.waveSize.value.y=T.waveSizeY})),this.mainFolder.add(T,"rainbowX",0,1).onChange((function(){return t.uniforms.rainbow1Dir.value.x=T.rainbowX})),this.mainFolder.add(T,"rainbowY",0,1).onChange((function(){return t.uniforms.rainbow1Dir.value.y=T.rainbowY})),this.mainFolder.add(T,"rainbowZ",0,1).onChange((function(){return t.uniforms.rainbow1Dir.value.z=T.rainbowZ})),this.mainFolder.add(T,"blurRadius",0,5).onChange((function(){return t.uniforms.blurRadius1.value=T.blurRadius})),this.mainFolder.add(T,"blurResX",0,1e3).onChange((function(){return t.uniforms.blurRes1.value.x=T.blurResX})),this.mainFolder.add(T,"blurResY",0,1e3).onChange((function(){return t.uniforms.blurRes1.value.y=T.blurResY})),this.folder1=this.mainFolder.addFolder("STRIPE"),this.folder1.add(D,"rainbowX",0,1).onChange((function(){return t.uniforms.rainbow2Dir.value.x=D.rainbowX})),this.folder1.add(D,"rainbowY",0,1).onChange((function(){return t.uniforms.rainbow2Dir.value.y=D.rainbowY})),this.folder1.add(D,"rainbowZ",0,1).onChange((function(){return t.uniforms.rainbow2Dir.value.z=D.rainbowZ})),this.folder1.add(D,"blurRadius",0,5).onChange((function(){return t.uniforms.blurRadius2.value=D.blurRadius})),this.folder1.add(D,"blurResX",0,1e3).onChange((function(){return t.uniforms.blurRes2.value.x=D.blurResX})),this.folder1.add(D,"blurResY",0,1e3).onChange((function(){return t.uniforms.blurRes2.value.y=D.blurResY})),this.mainFolder.open()},F=!1,I=0,A=[];function M(n,e,t,a){C&&t.remove(C),S&&t.remove(S),C=new l.i;var i=z(R,n,e,"MATERIAL 1"),r=N(R,n,e,"MATERIAL 2");i.transparent=!1,r.transparent=!1;for(var o=a.nCols,u=1/o,s=6*u,c=0;c<o;c++){console.log("quadSize",u+" "+c);var d=new f(s,4,32,32,u,c,a),v=c%2==0?i:r;(b=new l.g(d,v)).translateX(c*s),C.add(b)}if(a.mask){var m=a.nColsMask,p=1/m,g=6*p,h=z(R,n,e,"MATERIAL MASK 1"),w=N(R,n,e,"MATERIAL MASK 2"),_=(new l.q).load(x.a);h.alphaMap=_,w.alphaMap=_,h.transparent=!0,w.transparent=!0,S=new l.d;for(c=0;c<m;c++){console.log("quadSize",p+" "+c);var b;d=new f(g,4,32,32,p,c,a),v=c%2==0?h:w;(b=new l.g(d,v)).translateX(c*g),S.add(b)}S.translateX(g/2-3),I=S.position.x,t.add(S)}C.translateX(s/2-3),t.add(C)}function z(n,e,t,a){var i=(new l.q).load(h.a),r=(new l.q).load(h.a),o=(new l.q).load(_.a),u=new l.h({depthWrite:!1,depthTest:!1,transparent:!0,alphaMap:o,normalMap:r,displacementMap:i,displacementScale:.1,metalness:.5,map:e,color:16777215,side:l.b});return u.onBeforeCompile=function(e){e.uniforms.time={value:n},e.uniforms.size={value:0},e.uniforms.playWave={value:!1},e.uniforms.waveSpeed={value:0},e.uniforms.waveFrequency={value:0},e.uniforms.waveSize=new l.r(new l.s(0,0)),e.uniforms.useOffset={value:!0},e.uniforms.rainbow1Dir=new l.r(new l.t(0,0,0)),e.uniforms.rainbow2Dir=new l.r(new l.t(0,0,0)),e.uniforms.blurRadius1={value:0},e.uniforms.blurRes1=new l.r(new l.s(0,0)),e.uniforms.blurRadius2={value:0},e.uniforms.blurRes2=new l.r(new l.s(0,0)),e.vertexShader=m,e.fragmentShader=p,A.push(e),new E(u,e,t,a)},u}function N(n,e,t,a){var i=(new l.q).load(h.a),r=(new l.q).load(h.a),o=(new l.q).load(_.a),u=new l.h({depthWrite:!1,depthTest:!1,transparent:!0,alphaMap:o,normalMap:r,normalScale:l.s(0,0),displacementMap:i,displacementScale:0,metalness:0,map:e,color:16777215,side:l.b});return u.onBeforeCompile=function(e){e.uniforms.time={value:n},e.uniforms.size={value:0},e.uniforms.playWave={value:!1},e.uniforms.waveSpeed={value:0},e.uniforms.waveFrequency={value:0},e.uniforms.waveSize=new l.r(new l.s(0,0)),e.uniforms.useOffset={value:!0},e.uniforms.rainbow1Dir=new l.r(new l.t(0,0,0)),e.uniforms.rainbow2Dir=new l.r(new l.t(0,0,0)),e.uniforms.blurRadius1={value:0},e.uniforms.blurRes1=new l.r(new l.s(0,0)),e.uniforms.blurRadius2={value:0},e.uniforms.blurRes2=new l.r(new l.s(0,0)),e.vertexShader=m,e.fragmentShader=p,A.push(e),new E(u,e,t,a)},u}var L=function(){var n=new l.n,e=new l.j(75,window.innerWidth/window.innerHeight,.1,1e3);e.position.z=4;var t=new l.v({antialias:!0});t.setClearColor("#000000"),t.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(t.domElement);var a=new v.a,i={nCols:8,nColsMask:8,useOffset:!1,mirror:!1,mirrorHalf:!1,mirrorOffset:!1,mask:!0,animationSpeed:0};!function r(){if(requestAnimationFrame(r),null!=document.getElementById("video")&&!F){R=(new Date).getTime();var o=function(){var n=document.getElementById("video");console.log("video",n);var e=new l.u(n);return e.minFilter=l.e,e.magFilter=l.e,e.format=l.m,function(n){if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){navigator.mediaDevices.getUserMedia({video:{width:1280,height:720,facingMode:"user"}}).then((function(e){n.srcObject=e,n.play()})).catch((function(n){console.error("Unable to access the camera/webcam.",n)}))}else console.error("MediaDevices interface not available.")}(n),e}(),u=a.addFolder("MAIN");u.add(i,"nCols",1,100,1).onChange((function(){M(o,u,n,i)})),u.add(i,"nColsMask",1,100,1).onChange((function(){M(o,u,n,i)})),u.add(i,"mirror").onChange((function(){M(o,u,n,i)})),M(o,u,n,i),u.add(i,"mirrorHalf").onChange((function(){M(o,u,n,i)})),M(o,u,n,i),u.add(i,"useOffset").onChange((function(){M(o,u,n,i)})),M(o,u,n,i),u.add(i,"mirrorOffset").onChange((function(){M(o,u,n,i)})),u.add(i,"mask").onChange((function(){M(o,u,n,i)})),u.add(i,"animationSpeed",0,5,.1),M(o,u,n,i),u.open();var s=new l.a(16777215);n.add(s);var c=new l.k(16777215,1,80);c.position.set(0,0,50),n.add(c),F=!0}var d=(new Date).getTime();A.forEach((function(n){n.uniforms.time.value=(d-R)/1e3})),S&&((S.position.x-I>2||S.position.x-I<-2)&&(i.animationSpeed=-i.animationSpeed),S.translateX(i.animationSpeed/100)),t.render(n,e)}()};var B=function(){return L(),i.a.createElement("div",{className:"App"},i.a.createElement("video",{id:"video",autoPlay:!0,style:{display:"none"}}))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(i.a.createElement(B,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(n){n.unregister()}))}},[[23,1,2]]]);
//# sourceMappingURL=main.1139885a.chunk.js.map