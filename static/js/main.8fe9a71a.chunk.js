(window.webpackJsonpdigitaltwin=window.webpackJsonpdigitaltwin||[]).push([[0],{11:function(e,n,t){},12:function(e,n,t){},14:function(e,n,t){"use strict";t.r(n);var r=t(1),i=t.n(r),o=t(3),a=t.n(o),u=(t(11),t(12),t(0)),l=t(4),c=(t(13),t(5)),v=!1;var s=function(){var e=new u.k,n=new u.g(75,window.innerWidth/window.innerHeight,.1,1e3);n.position.z=4,new l.a(n);var t,r,i=new u.r({antialias:!0});i.setClearColor("#000000"),i.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(i.domElement);var o=new c.a;!function a(){if(requestAnimationFrame(a),null!=document.getElementById("video")&&!v){r=(new Date).getTime();var l=document.getElementById("video");console.log("video",l);var c=new u.q(l);c.minFilter=u.c,c.magFilter=u.c,c.format=u.j;var s=new u.h(6,4,64),f=new u.f({color:16777215,map:c,side:u.a});f.onBeforeCompile=function(e){e.uniforms.time={value:r},e.uniforms.size={value:5.6},e.uniforms.playWave={value:!0},e.uniforms.waveSpeed={value:.2},e.uniforms.waveFrequency={value:21.4},e.uniforms.waveSize=new u.n(new u.o(.07,.057)),e.uniforms.useOffset={value:!0},e.uniforms.rainbow1Dir=new u.n(new u.p(0,0,0)),e.uniforms.rainbow2Dir=new u.n(new u.p(.1,0,.54)),e.uniforms.blurRadius1={value:0},e.uniforms.blurRes1=new u.n(new u.o(0,0)),e.uniforms.blurRadius2={value:0},e.uniforms.blurRes2=new u.n(new u.o(0,0)),e.vertexShader="\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvarying vec3 lightDir;\nvarying vec3 viewDir;\n//varying vec2 vUv;\nuniform float time;\n\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\n\n\tvec3 lightPos = vec3(0.0,0.0,1.0);\n\tvec3 eyePos = vec3(0.0,0.0,1.0);//(viewMatrix * vec4(0.0,0.0,1.0,1.0)).xyz;//cameraPosition;//viewMatrix * vec4(cameraPosition,1.0)).xyz;\n\n\tvec3 viewPos = gl_Position.xyz;\n\tvec3 L = normalize(lightPos - viewPos);\n\tvec3 V = normalize(eyePos- viewPos);\n\tlightDir = L;\n\tviewDir = V;\n\t//vUv = uv;\n}\n",e.fragmentShader="\n\nvec3 bump3y (vec3 x, vec3 yoffset)\n{\n\tvec3 y = vec3(1.,1.,1.) - x * x;\n\ty = saturate(y-yoffset);\n\treturn y;\n}\n\nvec3 spectral_zucconi (float w)\n{\n\t\t// w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 cs = vec3(3.54541723, 2.86670055, 2.29421995);\n\tconst vec3 xs = vec3(0.69548916, 0.49416934, 0.28269708);\n\tconst vec3 ys = vec3(0.02320775, 0.15936245, 0.53520021);\n\n\treturn bump3y (\tcs * (x - xs), ys);\n}\n\n// --- Spectral Zucconi 6 --------------------------------------------\n\n// Based on GPU Gems\n// Optimised by Alan Zucconi\nvec3 spectral_zucconi6 (float w)\n{\n\t// w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 c1 = vec3(3.54585104, 2.93225262, 2.41593945);\n\tconst vec3 x1 = vec3(0.69549072, 0.49228336, 0.27699880);\n\tconst vec3 y1 = vec3(0.02312639, 0.15225084, 0.52607955);\n\n\tconst vec3 c2 = vec3(3.90307140, 3.21182957, 3.96587128);\n\tconst vec3 x2 = vec3(0.11748627, 0.86755042, 0.66077860);\n\tconst vec3 y2 = vec3(0.84897130, 0.88445281, 0.73949448);\n\n\treturn\n\t\tbump3y(c1 * (x - x1), y1) +\n\t\tbump3y(c2 * (x - x2), y2) ;\n}\n//START BLUR\n\nvec4 blur(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n\tvec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353) * direction;\n  vec2 off2 = vec2(3.2941176470588234) * direction;\n  vec2 off3 = vec2(5.176470588235294) * direction;\n  color += texture2D(image, uv) * 0.1964825501511404;\n  color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\n  color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\n  color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\n  color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\n  color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\n  color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\n  return color;\n}\n\nuniform float blurRadius1;\nuniform float blurRadius2;\nuniform vec2 blurRes1;\nuniform vec2 blurRes2;\n\nvec4 textureWithBlur( bool isMaterial2, vec2 vUv3, sampler2D map){\n\tfloat blurRadius;\n\tvec2 blurRes;\n\tif(isMaterial2){\n\t\tblurRadius = blurRadius2;\n\t\tblurRes = blurRes2;\n\t} else{\n\t\tblurRadius = blurRadius1;\n\t\tblurRes = blurRes1;\n\t}\n\tvec4 texelColor;\n\tif(blurRadius > 0.0){\n\t\tvec4 texelColor1 =  blur(map, vUv3, blurRes, vec2(blurRadius, 0.0));\n\t\tvec4 texelColor2 =  blur(map, vUv3, blurRes, vec2(0.0, blurRadius));\n\t\ttexelColor = (texelColor1 + texelColor2)/2.0;\n\t}else{\n\t\ttexelColor = texture2D( map, vUv3 );\n\t}\n\ttexelColor = mapTexelToLinear( texelColor );\n\treturn texelColor;\n}\n\n//END BLUR\n\n\nuniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nuniform float time;\nuniform float size;\nuniform bool useOffset;\n\nuniform bool playWave;\nuniform float waveSpeed;\nuniform float waveFrequency;\nuniform vec2 waveSize;\n\nuniform vec3 rainbow1Dir;\nuniform vec3 rainbow2Dir;\n\nvarying vec3 lightDir;\nvarying vec3 viewDir;\n\nvec2 sineWave(vec2 uv, vec2 phase){\n\tfloat x = sin( waveFrequency*uv.y + waveFrequency*uv.x + 6.28*phase.x) * waveSize.x;\n\tfloat y = cos( waveFrequency*uv.y + waveFrequency*uv.x + 6.28*phase.y) * waveSize.y;\n\treturn vec2(uv.x+x, uv.y+y);\n}\n\nvec2 calculateNewUvs(bool isMaterial2){\n\tvec2 vUv3 = vUv;\n\tif( isMaterial2 ){\n\t\tif(useOffset){\n\t\t\tvUv3.x -= 0.01 * size;\n\t\t}\n\t\tif(playWave){\n\t\t\tvUv3 = sineWave(vUv3, vec2(time* waveSpeed,0.0));\n\t\t}\n\t}\n\treturn vUv3;\n}\n\nvec3 calculateRainbow(vec3 uv_tangent){\n\tfloat d = 1600.0; //nm\n\n\tvec3 L = lightDir;\n\tvec3 V = viewDir;\n\n\tvec3 H = L + V;\n\tfloat u = abs(dot(uv_tangent, H));\n\n\tif(u > 0.0){\n\t\t// Calculates the reflection color\n\t\tvec3 reflectionColor = vec3(0.0,0.0,0.0);\n\t\tfor (float n = 1.0; n <= 8.0; n++){\n\t\t\tfloat wavelength = u * d / n;\n\t\t\treflectionColor += spectral_zucconi(wavelength);\n\t\t}\n\t\treflectionColor = saturate(reflectionColor)*(1.0-u);\n\t\treturn reflectionColor;\n\t}\n\treturn vec3(0.0,0.0,0.0);\n}\n\nvoid main() {\n\t#include <clipping_planes_fragment>\n\n\tfloat nCols = 100.0/size;\n\tbool isMaterial2 = mod(ceil(vUv.x * nCols),2.0) == 0.0;\n\tvec2 vUv3 = calculateNewUvs(isMaterial2);\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tif( isMaterial2 ){\n\t\tdiffuseColor = vec4(1.0,1.0,1.0,opacity);\n\t}\n\n\t#include <logdepthbuf_fragment>\n\n\tvec4 texelColor = textureWithBlur(isMaterial2, vUv3, map);\n\tdiffuseColor *= texelColor;\n\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\n\n\tvec3 reflectionColor;\n\tif(isMaterial2) {\n\t\treflectionColor = calculateRainbow(rainbow2Dir);\n\t}else{\n\t\treflectionColor = calculateRainbow(rainbow1Dir);\n\t}\n\tdiffuseColor.rgb = diffuseColor.rgb + reflectionColor;\n\n\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4(outgoingLight, diffuseColor.a);\n\n\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",t=e,console.log(t)};var d={useOffset:!0,size:5.6},m={color1:16777215,rainbowX:0,rainbowY:0,rainbowZ:0,blurRadius:0,blurResX:0,blurResY:0},g={color1:16777215,playWave:!0,waveSpeed:1,waveSizeX:.01,waveSizeY:.01,waveFrequency:1,rainbowX:.1,rainbowY:0,rainbowZ:.54,blurRadius:0,blurResX:0,blurResY:0},w=o.addFolder("PROPERTIES"),p=o.addFolder("MATERIAL 1"),b=o.addFolder("MATERIAL 2");w.add(d,"size",0,10).onChange((function(){return t.uniforms.size.value=d.size})),w.add(d,"useOffset").onChange((function(){return t.uniforms.useOffset.value=d.useOffset})),p.addColor(m,"color1"),p.add(m,"rainbowX",0,1).onChange((function(){return t.uniforms.rainbow1Dir.value.x=m.rainbowX})),p.add(m,"rainbowY",0,1).onChange((function(){return t.uniforms.rainbow1Dir.value.y=m.rainbowY})),p.add(m,"rainbowZ",0,1).onChange((function(){return t.uniforms.rainbow1Dir.value.z=m.rainbowZ})),p.add(m,"blurRadius",0,5).onChange((function(){return t.uniforms.blurRadius1.value=m.blurRadius})),p.add(m,"blurResX",0,1e3).onChange((function(){return t.uniforms.blurRes1.value.x=m.blurResX})),p.add(m,"blurResY",0,1e3).onChange((function(){return t.uniforms.blurRes1.value.y=m.blurResY})),b.addColor(g,"color1").onChange((function(){return f.color.setHex(g.color1)})),b.add(g,"playWave").onChange((function(){return t.uniforms.playWave.value=g.playWave})),b.add(g,"waveSpeed",0,5).onChange((function(){return t.uniforms.waveSpeed.value=g.waveSpeed})),b.add(g,"waveFrequency",0,100).onChange((function(){return t.uniforms.waveFrequency.value=g.waveFrequency})),b.add(g,"waveSizeX",0,.1).onChange((function(){return t.uniforms.waveSize.value.x=g.waveSizeX})),b.add(g,"waveSizeY",0,.1).onChange((function(){return t.uniforms.waveSize.value.y=g.waveSizeY})),b.add(g,"rainbowX",0,1).onChange((function(){return t.uniforms.rainbow2Dir.value.x=g.rainbowX})),b.add(g,"rainbowY",0,1).onChange((function(){return t.uniforms.rainbow2Dir.value.y=g.rainbowY})),b.add(g,"rainbowZ",0,1).onChange((function(){return t.uniforms.rainbow2Dir.value.z=g.rainbowZ})),b.add(g,"blurRadius",0,5).onChange((function(){return t.uniforms.blurRadius2.value=g.blurRadius})),b.add(g,"blurResX",0,1e3).onChange((function(){return t.uniforms.blurRes2.value.x=g.blurResX})),b.add(g,"blurResY",0,1e3).onChange((function(){return t.uniforms.blurRes2.value.y=g.blurResY})),w.open(),p.open(),b.open();var x=new u.e(s,f);e.add(x),function(e){if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){navigator.mediaDevices.getUserMedia({video:{width:1280,height:720,facingMode:"user"}}).then((function(n){e.srcObject=n,e.play()})).catch((function(e){console.error("Unable to access the camera/webcam.",e)}))}else console.error("MediaDevices interface not available.")}(l),v=!0}if(t){var _=(new Date).getTime();t.uniforms.time.value=(_-r)/1e3}i.render(e,n)}()};var f=function(){return s(),i.a.createElement("div",{className:"App"},i.a.createElement("video",{id:"video",autoPlay:!0,style:{display:"none"}}))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));a.a.render(i.a.createElement(f,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))},6:function(e,n,t){e.exports=t(14)}},[[6,1,2]]]);
//# sourceMappingURL=main.8fe9a71a.chunk.js.map