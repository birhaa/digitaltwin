{"version":3,"sources":["bumpmap.jpg","alpha.jpg","test.jpg","customplanegeometry.js","meshphysical_vert.glsl.js","meshphysical_frag.glsl.js","MaterialFolder.js","scene.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PlaneGeometry","width","height","widthSegments","heightSegments","Geometry","call","this","type","parameters","fromBufferGeometry","PlaneBufferGeometry","mergeVertices","quadSizePros","idx","useOffset","BufferGeometry","ix","iy","width_half","height_half","gridX","Math","floor","gridY","gridX1","gridY1","segment_width","segment_height","indices","vertices","normals","uvs","y","uv","x","push","a","b","c","d","setIndex","addAttribute","Float32BufferAttribute","prototype","Object","create","constructor","dat","removeFolder","name","folder","__folders","close","__ul","removeChild","domElement","parentNode","onResize","materialShader1","materialShader2","timeStart","mirror","settings","stripes","metalness","roughness","ambientIntensity","aoMapIntensity","envMapIntensity","displacementScale","normalScale","color1","playWave","waveSpeed","waveSizeX","waveSizeY","waveFrequency","rainbowX","rainbowY","rainbowZ","blurRadius","blurResX","blurResY","params","MaterialFolder","material","materialShader","gui","mainFolder","addFolder","add","onChange","uniforms","size","value","min","max","set","multiplyScalar","addColor","color","setHex","waveSize","rainbow1Dir","z","blurRadius1","blurRes1","folder1","rainbow2Dir","blurRadius2","blurRes2","open","initVideoOnce","initPlane","texture","nCols","scene","remove","THREE","material1","dismap","load","bumpimg","bumpmap","alphamap","alphaimg","transparent","alphaMap","normalMap","displacementMap","map","side","onBeforeCompile","shader","time","vertexShader","meshphysical_vert","fragmentShader","meshphysical_frag","initMaterial1","material2","initMaterial2","numberOfQuads","quadSize","i","console","log","geometry","m","plane","translateX","init","camera","window","innerWidth","innerHeight","position","renderer","antialias","setClearColor","setSize","document","body","appendChild","render","requestAnimationFrame","getElementById","Date","getTime","video","minFilter","magFilter","format","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","play","catch","error","playVideo","initVideoTexture","light","light2","now","App","Scene","className","id","autoPlay","style","display","Boolean","location","hostname","match","ReactDOM","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d023c06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bumpmap.d444e896.jpg\";","module.exports = __webpack_public_path__ + \"static/media/alpha.b60047e0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/test.b6ffa233.jpg\";","/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nimport { Geometry } from 'three/src/core/Geometry.js';\nimport { BufferGeometry } from 'three/src/core/BufferGeometry.js';\nimport { Float32BufferAttribute } from 'three/src/core/BufferAttribute.js';\n\n// PlaneGeometry\n\nfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\tGeometry.call( this );\n\n\tthis.type = 'PlaneGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\tthis.mergeVertices();\n\n}\n\nPlaneGeometry.prototype = Object.create( Geometry.prototype );\nPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n// PlaneBufferGeometry\n\nfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments, quadSizePros, idx , useOffset) {\n\n\tBufferGeometry.call( this );\n\n\tthis.type = 'PlaneBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\twidth = width || 1;\n\theight = height || 1;\n\n\tvar width_half = width / 2;\n\tvar height_half = height / 2;\n\n\tvar gridX = Math.floor( widthSegments ) || 1;\n\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\tvar gridX1 = gridX + 1;\n\tvar gridY1 = gridY + 1;\n\n\tvar segment_width = width / gridX;\n\tvar segment_height = height / gridY;\n\n\tvar ix, iy;\n\n\t// buffers\n\n\tvar indices = [];\n\tvar vertices = [];\n\tvar normals = [];\n\tvar uvs = [];\n\n\t// generate vertices, normals and uvs\n\n\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\tvar y = iy * segment_height - height_half;\n\n\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\tvar uv;\n\t\t\tif(idx % 2 == 0 || !useOffset){\n\t\t\t\tuv = ix / gridX * quadSizePros + idx*quadSizePros\n\t\t\t}else{\n\t\t\t\tuv = ix / gridX * quadSizePros + idx*quadSizePros - quadSizePros\n\t\t\t}\n\t\t\tuvs.push( uv);\n\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\tvar a = ix + gridX1 * iy;\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t// faces\n\n\t\t\tindices.push( a, b, d );\n\t\t\tindices.push( b, c, d );\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n}\n\nPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\nPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\nexport { PlaneGeometry, PlaneBufferGeometry };\n","export default /* glsl */`\n#define STANDARD\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n//BIRGITTE\n\nvarying vec3 lightDir;\nvarying vec3 viewDir;\nuniform float time;\n\n//END BIRGITTE\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n\t#ifdef USE_TANGENT\n\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\n\t#endif\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t//BIRGITTE\n\tvec3 lightPos = vec3(0.0,0.0,1.0);\n\tvec3 eyePos = vec3(0.0,0.0,1.0);//(viewMatrix * vec4(0.0,0.0,1.0,1.0)).xyz;//cameraPosition;//viewMatrix * vec4(cameraPosition,1.0)).xyz;\n\n\tvec3 viewPos = gl_Position.xyz;\n\tvec3 L = normalize(lightPos - viewPos);\n\tvec3 V = normalize(eyePos- viewPos);\n\tlightDir = L;\n\tviewDir = V;\n\t//END BIRGITTE\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n`;\n","export default /* glsl */`\n#define STANDARD\n\n//BIRGITTE UNIFORMS\n\n//Blur\nuniform float blurRadius1;\nuniform float blurRadius2;\nuniform vec2 blurRes1;\nuniform vec2 blurRes2;\n\n//Stripes\nuniform float size;\nuniform bool useOffset;\n\n//Animation\nuniform float time;\nuniform bool playWave;\nuniform float waveSpeed;\nuniform float waveFrequency;\nuniform vec2 waveSize;\n\n//Rainbow\nuniform vec3 rainbow1Dir;\nuniform vec3 rainbow2Dir;\nvarying vec3 lightDir;\nvarying vec3 viewDir;\n\n//END BIRGITTE UNIFORMS\n\n//BIRGITTE METHODS\n\nvec3 bump3y (vec3 x, vec3 yoffset)\n{\n\tvec3 y = vec3(1.,1.,1.) - x * x;\n\ty = saturate(y-yoffset);\n\treturn y;\n}\n\nvec3 spectral_zucconi (float w)\n{\n\t\t// w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 cs = vec3(3.54541723, 2.86670055, 2.29421995);\n\tconst vec3 xs = vec3(0.69548916, 0.49416934, 0.28269708);\n\tconst vec3 ys = vec3(0.02320775, 0.15936245, 0.53520021);\n\n\treturn bump3y (\tcs * (x - xs), ys);\n}\n\n// --- Spectral Zucconi 6 --------------------------------------------\n\n// Based on GPU Gems\n// Optimised by Alan Zucconi\nvec3 spectral_zucconi6 (float w)\n{\n\t// w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 c1 = vec3(3.54585104, 2.93225262, 2.41593945);\n\tconst vec3 x1 = vec3(0.69549072, 0.49228336, 0.27699880);\n\tconst vec3 y1 = vec3(0.02312639, 0.15225084, 0.52607955);\n\n\tconst vec3 c2 = vec3(3.90307140, 3.21182957, 3.96587128);\n\tconst vec3 x2 = vec3(0.11748627, 0.86755042, 0.66077860);\n\tconst vec3 y2 = vec3(0.84897130, 0.88445281, 0.73949448);\n\n\treturn\n\t\tbump3y(c1 * (x - x1), y1) +\n\t\tbump3y(c2 * (x - x2), y2) ;\n}\n\n//START BLUR\n\nvec4 blur(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n\tvec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353) * direction;\n  vec2 off2 = vec2(3.2941176470588234) * direction;\n  vec2 off3 = vec2(5.176470588235294) * direction;\n  color += texture2D(image, uv) * 0.1964825501511404;\n  color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\n  color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\n  color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\n  color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\n  color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\n  color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\n  return color;\n}\n\nvec4 textureWithBlur( bool isMaterial2, vec2 vUv3, sampler2D map){\n\tfloat blurRadius;\n\tvec2 blurRes;\n\tif(isMaterial2){\n\t\tblurRadius = blurRadius2;\n\t\tblurRes = blurRes2;\n\t} else{\n\t\tblurRadius = blurRadius1;\n\t\tblurRes = blurRes1;\n\t}\n\tvec4 texelColor;\n\tif(blurRadius > 0.0){\n\t\tvec4 texelColor1 =  blur(map, vUv3, blurRes, vec2(blurRadius, 0.0));\n\t\tvec4 texelColor2 =  blur(map, vUv3, blurRes, vec2(0.0, blurRadius));\n\t\ttexelColor = (texelColor1 + texelColor2)/2.0;\n\t}else{\n\t\ttexelColor = texture2D( map, vUv3 );\n\t}\n\ttexelColor = mapTexelToLinear( texelColor );\n\treturn texelColor;\n}\n\n//END BLUR\n\nvec2 sineWave(vec2 uv, vec2 phase){\n\tfloat x = sin( waveFrequency*uv.y + waveFrequency*uv.x + 6.28*phase.x) * waveSize.x;\n\tfloat y = cos( waveFrequency*uv.y + waveFrequency*uv.x + 6.28*phase.y) * waveSize.y;\n\treturn vec2(uv.x+x, uv.y+y);\n}\n\nvec2 calculateNewUvs(vec2 vUv, bool isMaterial2){\n\tvec2 vUv3 = vUv;\n\tif( isMaterial2 ){\n\t\tif(useOffset){\n\t\t\tvUv3.x -= 0.01 * size;\n\t\t}\n\t}\n\telse{\n\t\tif(playWave){\n\t\t\tvUv3 = sineWave(vUv3, vec2(time* waveSpeed,0.0));\n\t\t}\n\t}\n\treturn vUv3;\n}\n\nvec3 calculateRainbow(vec3 uv_tangent){\n\tfloat d = 2400.0; //nm\n\n\tvec3 L = lightDir;\n\tvec3 V = viewDir;\n\n\tvec3 H = L + V;\n\tfloat u = abs(dot(uv_tangent, H));\n\n\tif(u > 0.0){\n\t\t// Calculates the reflection color\n\t\tvec3 reflectionColor = vec3(0.0,0.0,0.0);\n\t\tfor (float n = 1.0; n <= 8.0; n++){\n\t\t\tfloat wavelength = u * d / n;\n\t\t\treflectionColor += spectral_zucconi(wavelength);\n\t\t}\n\t\treflectionColor = saturate(reflectionColor)*(1.0-u);\n\t\treturn reflectionColor;\n\t}\n\treturn vec3(0.0,0.0,0.0);\n}\n\n//END BIRGITTE METHODS\n\n\n\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\t//BIRGITTE\n\tfloat nCols = 100.0/size;\n\tbool isMaterial2 = mod(ceil(vUv.x * nCols),2.0) == 0.0;\n\tvec2 vUv3 = calculateNewUvs(vUv,isMaterial2);\n\t//END BIRGITTE\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\n\t//BIRGITTE\n\tvec4 texelColor = textureWithBlur(isMaterial2, vUv3, map);\n\tdiffuseColor *= texelColor;\n\t//END BIRGITTE\n\n\t#include <color_fragment>\n\n\t//BIRGITTE\n\n\tvec3 reflectionColor;\n\tif(isMaterial2) {\n\t\treflectionColor = calculateRainbow(rainbow2Dir);\n\t}else{\n\t\treflectionColor = calculateRainbow(rainbow1Dir);\n\t}\n\tdiffuseColor.rgb = diffuseColor.rgb + reflectionColor;\n\n\t//END BIRGITTE\n\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t// this is a stub for the transparency model\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n`;\n","\n\nimport * as dat from 'dat.gui';\n\n\ndat.GUI.prototype.removeFolder = function(name) {\n  var folder = this.__folders[name];\n  if (!folder) {\n    return;\n  }\n  folder.close();\n  this.__ul.removeChild(folder.domElement.parentNode);\n  delete this.__folders[name];\n  this.onResize();\n}\n\n\n\nconst settings = {\n    useOffset : true,\n    stripes: 0.0,\n  \tmetalness: 1.0,\n  \troughness: 0.4,\n  \tambientIntensity: 0.2,\n  \taoMapIntensity: 1.0,\n  \tenvMapIntensity: 1.0,\n  \tdisplacementScale: 0.1,\n  \tnormalScale: 0.0,\n    color1: 0xffffff,\n    playWave : false,\n    waveSpeed : 1.0,\n    waveSizeX : 0.00,\n    waveSizeY : 0.00,\n    waveFrequency : 1.0,\n    rainbowX : 0.0,\n    rainbowY : 0.0,\n    rainbowZ : 0.0,\n    blurRadius : 0.0,\n    blurResX : 0.0,\n    blurResY : 0.0\n};\n\nconst params = {\n    color1: 0xffffff,\n    rainbowX : 0.0,\n    rainbowY : 0.0,\n    rainbowZ : 0.0,\n    blurRadius : 0.0,\n    blurResX : 0.0,\n    blurResY : 0.0\n};\n\n\nclass MaterialFolder{\n\n  constructor(material, materialShader, gui, name){\n    gui.removeFolder(name);\n    this.mainFolder = gui.addFolder( name );\n\n    this.mainFolder\n    .add(settings, 'stripes', 0.0, 10.0)\n    .onChange( () => materialShader.uniforms.size.value = settings.stripes );\n    this.mainFolder.add(settings, 'useOffset')\n    .onChange( () =>  materialShader.uniforms.useOffset.value = settings.useOffset );\n\n    this.mainFolder.add( settings, \"metalness\" ).min( 0 ).max( 1 ).onChange( function ( value ) {\n      material.metalness = value;\n    } );\n    this.mainFolder.add( settings, \"roughness\" ).min( 0 ).max( 1 ).onChange( function ( value ) {\n      material.roughness = value;\n    } );\n    // this.mainFolder.add( settings, \"ambientIntensity\" ).min( 0 ).max( 1 ).onChange( function ( value ) {\n    //   ambientLight.intensity = value;\n    // } );\n    this.mainFolder.add( settings, \"displacementScale\" ).min( 0 ).max( 3.0 ).onChange( function ( value ) {\n      material.displacementScale = value;\n    } );\n    this.mainFolder.add( settings, \"normalScale\" ).min( - 1 ).max( 1 ).onChange( function ( value ) {\n      material.normalScale.set( 1, - 1 ).multiplyScalar( value );\n    } );\n    this.mainFolder\n    .addColor( settings, 'color1' )\n    .onChange( () => material.color.setHex(settings.color1) );\n    this.mainFolder.add(settings, 'playWave')\n    .onChange( () =>  materialShader.uniforms.playWave.value = settings.playWave );\n    this.mainFolder.add(settings, 'waveSpeed', 0.0,5.0)\n    .onChange( () =>  materialShader.uniforms.waveSpeed.value = settings.waveSpeed );\n    this.mainFolder.add(settings, 'waveFrequency', 0.0,100.0)\n    .onChange( () =>  materialShader.uniforms.waveFrequency.value = settings.waveFrequency );\n    this.mainFolder.add(settings, 'waveSizeX', 0.0,0.1)\n    .onChange( () =>  materialShader.uniforms.waveSize.value.x = settings.waveSizeX );\n    this.mainFolder.add(settings, 'waveSizeY', 0.0,0.1)\n    .onChange( () =>  materialShader.uniforms.waveSize.value.y = settings.waveSizeY );\n    this.mainFolder.add(settings, 'rainbowX', 0.0, 1.0)\n    .onChange( () =>  materialShader.uniforms.rainbow1Dir.value.x = settings.rainbowX );\n    this.mainFolder.add(settings, 'rainbowY', 0.0, 1.0)\n    .onChange( () =>  materialShader.uniforms.rainbow1Dir.value.y = settings.rainbowY );\n    this.mainFolder.add(settings, 'rainbowZ', 0.0, 1.0)\n    .onChange( () =>  materialShader.uniforms.rainbow1Dir.value.z = settings.rainbowZ );\n    this.mainFolder.add(settings, \"blurRadius\", 0.0, 5.0)\n    .onChange( () =>  materialShader.uniforms.blurRadius1.value = settings.blurRadius );\n    this.mainFolder.add(settings, \"blurResX\", 0.0, 1000.0)\n    .onChange( () =>  materialShader.uniforms.blurRes1.value.x = settings.blurResX );\n    this.mainFolder.add(settings, \"blurResY\", 0.0, 1000.0)\n    .onChange( () =>  materialShader.uniforms.blurRes1.value.y = settings.blurResY );\n\n    this.folder1 = this.mainFolder.addFolder( 'STRIPE' );\n    this.folder1.add(params, 'rainbowX', 0.0, 1.0)\n    .onChange( () =>  materialShader.uniforms.rainbow2Dir.value.x = params.rainbowX );\n    this.folder1.add(params, 'rainbowY', 0.0, 1.0)\n    .onChange( () =>  materialShader.uniforms.rainbow2Dir.value.y = params.rainbowY );\n    this.folder1.add(params, 'rainbowZ', 0.0, 1.0)\n    .onChange( () =>  materialShader.uniforms.rainbow2Dir.value.z = params.rainbowZ );\n    this.folder1.add(params, \"blurRadius\", 0.0, 5.0)\n    .onChange( () =>  materialShader.uniforms.blurRadius2.value = params.blurRadius );\n    this.folder1.add(params, \"blurResX\", 0.0, 1000.0)\n    .onChange( () =>  materialShader.uniforms.blurRes2.value.x = params.blurResX );\n    this.folder1.add(params, \"blurResY\", 0.0, 1000.0)\n    .onChange( () =>  materialShader.uniforms.blurRes2.value.y = params.blurResY );\n\n\n    this.mainFolder.open();\n\n  }\n\n\n}\n\nexport {\n  MaterialFolder,\n  settings\n}\n","\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport {PlaneBufferGeometry} from'./customplanegeometry.js'\nimport * as dat from 'dat.gui';\nimport meshbasic_vert from './meshbasic_vert.glsl.js';\nimport meshbasic_frag from './mesbasic_frag.glsl.js';\nimport meshphysical_vert from './meshphysical_vert.glsl.js';\nimport meshphysical_frag from './meshphysical_frag.glsl.js';\nimport testimg from \"./test.jpg\"\nimport bumpimg from \"./bumpmap.jpg\"\nimport alphaimg from \"./alpha.jpg\"\nimport {MaterialFolder} from './MaterialFolder'\n\n\nlet initVideoOnce = false;\nlet materialShader1, materialShader2, timeStart;\nlet mirror;\n\n\nconst init = function(){\n\n  // ------------------------------------------------\n  // BASIC SETUP\n  // ------------------------------------------------\n\n  // Create an empty scene\n  var scene = new THREE.Scene();\n\n  // Create a basic perspective camera\n  var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n  camera.position.z = 4;\n  //new OrbitControls(camera);\n\n  // Create a renderer with Antialiasing\n  var renderer = new THREE.WebGLRenderer({antialias:true});\n\n  // Configure renderer clear color\n  renderer.setClearColor(\"#000000\");\n\n  // Configure renderer size\n  renderer.setSize( window.innerWidth, window.innerHeight );\n\n  // Append Renderer to DOM\n  document.body.appendChild( renderer.domElement );\n\n  // ------------------------------------------------\n  // FUN STARTS HERE\n  // ------------------------------------------------\n\n  const gui = new dat.GUI();\n\n  // Render Loop\n  var render = function () {\n    requestAnimationFrame( render );\n\n    if(document.getElementById( 'video' ) != null && !initVideoOnce){\n      timeStart = new Date().getTime();\n\n      var texture = initVideoTexture();\n\n      var params = {\n        nCols : 8,\n        useOffset : false\n      }\n      var mainFolder = gui.addFolder( 'MAIN' );\n      mainFolder\n      .add(params, 'nCols', 1, 100, 1)\n      .onChange( () => {initPlane(texture, mainFolder, params.nCols, scene, params.useOffset)} );\n      mainFolder.add(params, 'useOffset' )\n      .onChange( () => {initPlane(texture, mainFolder, params.nCols, scene, params.useOffset)} );\n      initPlane(texture, mainFolder, params.nCols, scene)\n      mainFolder.open();\n\n\n      var light = new THREE.AmbientLight( 0xffffff ); // soft white light\n      scene.add( light );\n\n      var light2 = new THREE.PointLight( 0xffffff, 1, 80 );\n      light2.position.set( 0, 0, 50 );\n      scene.add( light2 )\n\n      initVideoOnce = true;\n    }\n\n    if(materialShader2 ){\n      const now = new Date().getTime();\n      materialShader2.uniforms.time.value = (now - timeStart) / 1000;\n    }\n\n    if(materialShader1){\n      const now = new Date().getTime();\n      materialShader1.uniforms.time.value = (now - timeStart) / 1000;\n    }\n\n    // Render the scene\n    renderer.render(scene, camera);\n  }\n\n  render();\n\n\n}\n\nfunction initPlane(texture, mainFolder, nCols, scene, useOffset){\n\n  if(mirror)\n    scene.remove(mirror)\n\n  mirror = new THREE.Object3D()\n\n  var material1 = initMaterial1(timeStart, texture, mainFolder);\n  var material2 = initMaterial2(timeStart, texture, mainFolder);\n\n\n  var numberOfQuads = nCols;\n  var quadSizePros = 1.0/numberOfQuads;\n  var planeSize = 6;\n  var quadSize = planeSize*quadSizePros;\n  for(var i = 0; i <numberOfQuads; i++){\n    console.log(\"quadSize\", quadSizePros + \" \" + i)\n    var geometry = new PlaneBufferGeometry( quadSize, 4,32, 32, quadSizePros, i, useOffset );\n    var m = i % 2 ==0 ?  material1 : material2;\n    var plane = new THREE.Mesh( geometry, m );\n    plane.translateX(i*quadSize);\n    mirror.add( plane );\n  }\n  if(numberOfQuads > 1)\n    mirror.translateX(-planeSize/2 + quadSize/2);\n\n  scene.add(mirror)\n}\n\n\nfunction initVideoTexture(){\n  var video = document.getElementById( 'video' );\n  console.log(\"video\", video);\n  var texture = new THREE.VideoTexture( video );\n  texture.minFilter = THREE.LinearFilter;\n  texture.magFilter = THREE.LinearFilter;\n  texture.format = THREE.RGBFormat;\n  playVideo(video);\n  return texture;\n}\n\nfunction initMaterial1(timeStart, texture, gui){\n  var dismap = new THREE.TextureLoader().load( bumpimg );\n  var bumpmap = new THREE.TextureLoader().load( bumpimg );\n  var alphamap = new THREE.TextureLoader().load( alphaimg );\n  var material1 = new THREE.MeshStandardMaterial( {transparent: false, alphaMap : alphamap, normalMap: bumpmap, displacementMap: dismap,displacementScale:0.1, metalness: 0.5, map: texture, color: 0xffffff, side: THREE.DoubleSide} );\n\n  material1.onBeforeCompile = function( shader ) {\n    shader.uniforms.time = { value: timeStart };\n    shader.uniforms.size = { value : 0.0};\n    shader.uniforms.playWave = {value : false};\n    shader.uniforms.waveSpeed = {value : 0.0};\n    shader.uniforms.waveFrequency = {value : 0.0};\n    shader.uniforms.waveSize = new THREE.Uniform(new THREE.Vector2(0.0,0.0))\n    shader.uniforms.useOffset = {value : true};\n    shader.uniforms.rainbow1Dir = new THREE.Uniform(new THREE.Vector3(0.0,0.0,0.0))\n    shader.uniforms.rainbow2Dir = new THREE.Uniform(new THREE.Vector3(0.0,0.0,0.0))\n    shader.uniforms.blurRadius1 = {value : 0.0};\n    shader.uniforms.blurRes1 = new THREE.Uniform(new THREE.Vector2(0.0,0.0))\n    shader.uniforms.blurRadius2 = {value : 0.0};\n    shader.uniforms.blurRes2 = new THREE.Uniform(new THREE.Vector2(0.0,0.0))\n\n    shader.vertexShader = meshphysical_vert;\n    shader.fragmentShader = meshphysical_frag;\n\n    materialShader1 = shader;\n\n    new MaterialFolder(material1, shader, gui, \"MATERIAL 1\");\n\n  };\n\n\n  return material1;\n}\n\nfunction initMaterial2(timeStart, texture, gui){\n\n  var dismap = new THREE.TextureLoader().load( bumpimg );\n  var bumpmap = new THREE.TextureLoader().load( bumpimg );\n  var alphamap = new THREE.TextureLoader().load( alphaimg );\n  var material2 = new THREE.MeshStandardMaterial( { transparent: false, alphaMap : alphamap, normalMap: bumpmap, normalScale: THREE.Vector2(0.0, 0.0), displacementMap: dismap,displacementScale:0.0, metalness: 0.0, map: texture, color: 0xffffff, side: THREE.DoubleSide} );\n\n  material2.onBeforeCompile = function( shader ) {\n    shader.uniforms.time = { value: timeStart };\n    shader.uniforms.size = { value : 0.0};\n    shader.uniforms.playWave = {value : false};\n    shader.uniforms.waveSpeed = {value : 0.0};\n    shader.uniforms.waveFrequency = {value : 0.0};\n    shader.uniforms.waveSize = new THREE.Uniform(new THREE.Vector2(0.0,0.0))\n    shader.uniforms.useOffset = {value : true};\n    shader.uniforms.rainbow1Dir = new THREE.Uniform(new THREE.Vector3(0.0,0.0,0.0))\n    shader.uniforms.rainbow2Dir = new THREE.Uniform(new THREE.Vector3(0.0,0.0,0.0))\n    shader.uniforms.blurRadius1 = {value : 0.0};\n    shader.uniforms.blurRes1 = new THREE.Uniform(new THREE.Vector2(0.0,0.0))\n    shader.uniforms.blurRadius2 = {value : 0.0};\n    shader.uniforms.blurRes2 = new THREE.Uniform(new THREE.Vector2(0.0,0.0))\n\n    //console.log(shader.uniforms);\n    shader.vertexShader = meshphysical_vert;\n    shader.fragmentShader = meshphysical_frag;\n    materialShader2 = shader;\n    //console.log(\"mater\")\n\n    new MaterialFolder(material2, shader, gui, \"MATERIAL 2\");\n\n\n  };\n\n  return material2;\n}\n\n\nfunction playVideo(video){\n  if ( navigator.mediaDevices && navigator.mediaDevices.getUserMedia ) {\n\t\t\t\t\tvar constraints = { video: { width: 1280, height: 720, facingMode: 'user' } };\n\t\t\t\t\tnavigator.mediaDevices.getUserMedia( constraints ).then( function ( stream ) {\n\t\t\t\t\t\t// apply the stream to the video element used in the texture\n\t\t\t\t\t\tvideo.srcObject = stream;\n\t\t\t\t\t\tvideo.play();\n\t\t\t\t\t} ).catch( function ( error ) {\n\t\t\t\t\t\tconsole.error( 'Unable to access the camera/webcam.', error );\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error( 'MediaDevices interface not available.' );\n\t\t\t\t}\n}\n\nexport default init;\n","import React from 'react';\nimport './App.css';\nimport Scene from './scene'\n\nfunction App() {\n\n  Scene();\n\n  return (\n    <div className=\"App\">\n      <video id=\"video\" autoPlay style={{display:'none'}}></video>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}