{"version":3,"sources":["scene.js","meshphysical_vert.glsl.js","meshphysical_frag.glsl.js","App.js","serviceWorker.js","index.js"],"names":["initVideoOnce","init","scene","THREE","camera","window","innerWidth","innerHeight","position","z","OrbitControls","materialShader","timeStart","renderer","antialias","setClearColor","setSize","document","body","appendChild","domElement","gui","dat","render","requestAnimationFrame","getElementById","Date","getTime","video","console","log","texture","minFilter","magFilter","format","geometry","material2","color","map","side","onBeforeCompile","shader","uniforms","time","value","size","playWave","useOffset","rainbow1Dir","rainbow2Dir","vertexShader","fragmentShader","globalParams","params","color1","rainbowX","rainbowY","rainbowZ","params2","folder","addFolder","folder1","folder2","add","onChange","addColor","x","y","setHex","open","plane","navigator","mediaDevices","getUserMedia","width","height","facingMode","then","stream","srcObject","play","catch","error","playVideo","now","App","Scene","className","id","autoPlay","style","display","Boolean","location","hostname","match","ReactDOM","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4b2a94e.chunk.js","sourcesContent":["\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { FresnelShader } from 'three/examples/jsm/shaders/FresnelShader.js';\nimport * as dat from 'dat.gui';\nimport meshphysical_vert from './meshphysical_vert.glsl.js';\nimport meshphysical_frag from './meshphysical_frag.glsl.js';\n\n\n\nlet initVideoOnce = false;\n\nconst init = function(){\n\n  // ------------------------------------------------\n  // BASIC SETUP\n  // ------------------------------------------------\n\n  // Create an empty scene\n  var scene = new THREE.Scene();\n\n  // Create a basic perspective camera\n  var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n  camera.position.z = 4;\n  new OrbitControls(camera);\n\n  // Create a renderer with Antialiasing\n  var renderer = new THREE.WebGLRenderer({antialias:true});\n\n  // Configure renderer clear color\n  renderer.setClearColor(\"#000000\");\n\n  // Configure renderer size\n  renderer.setSize( window.innerWidth, window.innerHeight );\n\n  // Append Renderer to DOM\n  document.body.appendChild( renderer.domElement );\n\n  // ------------------------------------------------\n  // FUN STARTS HERE\n  // ------------------------------------------------\n\n  let materialShader, timeStart;\n  const gui = new dat.GUI();\n\n  // Render Loop\n  var render = function () {\n    requestAnimationFrame( render );\n\n    if(document.getElementById( 'video' ) != null && !initVideoOnce){\n      timeStart = new Date().getTime();\n\n      var video = document.getElementById( 'video' );\n      console.log(\"video\", video);\n      var texture = new THREE.VideoTexture( video );\n      texture.minFilter = THREE.LinearFilter;\n      texture.magFilter = THREE.LinearFilter;\n      texture.format = THREE.RGBFormat;\n    //  texture.offset.x = 0.1;\n\n      var geometry = new THREE.PlaneBufferGeometry( 6, 4,64 );\n      //var material = new THREE.MeshBasicMaterial( { map: texture, color: 0xffff00, side: THREE.DoubleSide} );\n\n      var material2 = new THREE.MeshBasicMaterial( {  color: 0xffffff, map: texture, side: THREE.DoubleSide } );\n\n      material2.onBeforeCompile = function( shader ) {\n        shader.uniforms.time = { value: timeStart };\n        shader.uniforms.size = { value : 1.0};\n        shader.uniforms.playWave = {value : true};\n        shader.uniforms.useOffset = {value : true};\n        shader.uniforms.rainbow1Dir = new THREE.Uniform(new THREE.Vector3(0.0,0.0,0.0))\n        shader.uniforms.rainbow2Dir = new THREE.Uniform(new THREE.Vector3(1.0,0.0,0.0))\n        //console.log(shader.uniforms);\n        shader.vertexShader = meshphysical_vert;\n        shader.fragmentShader = meshphysical_frag;\n        materialShader = shader;\n\n        console.log(materialShader);\n\n      };\n\n      var globalParams = {\n        useOffset : true\n      }\n\n      var params = {\n          color1: 0xffffff,\n          size: 1,\n          playWave : true,\n          rainbowX : 0.0,\n          rainbowY : 0.0,\n          rainbowZ : 0.0\n      };\n\n      var params2 = {\n          color1: 0xffffff,\n          size: 1,\n          playWave : true,\n          rainbowX : 1.0,\n          rainbowY : 0.0,\n          rainbowZ : 0.0\n      };\n      //gui.add(materialShader.uniforms.color, 'value', 0, 1000).name('color');\n      var folder = gui.addFolder( 'PROPERTIES' );\n      var folder1 = gui.addFolder( 'MATERIAL 1' );\n      var folder2 = gui.addFolder( 'MATERIAL 2' );\n\n\n      folder\n      .add(params, 'size', 0.0, 10.0)\n      .onChange( () => materialShader.uniforms.size.value = params.size );\n      folder.add(globalParams, 'useOffset')\n      .onChange( () =>  materialShader.uniforms.useOffset.value = globalParams.useOffset );\n\n      folder1\n      .addColor( params, 'color1' )\n      //.onChange( () => material2.color.setHex(params.color1) )\n      folder1.add(params, 'rainbowX', 0.0, 1.0)\n      .onChange( () =>  materialShader.uniforms.rainbow1Dir.value.x = params.rainbowX );\n      folder1.add(params, 'rainbowY', 0.0, 1.0)\n      .onChange( () =>  materialShader.uniforms.rainbow1Dir.value.y = params.rainbowY );\n      folder1.add(params, 'rainbowZ', 0.0, 1.0)\n      .onChange( () =>  materialShader.uniforms.rainbow1Dir.value.z = params.rainbowZ );\n\n\n      folder2\n      .addColor( params2, 'color1' )\n      .onChange( () => material2.color.setHex(params2.color1) );\n      folder2.add(params2, 'playWave')\n      .onChange( () =>  materialShader.uniforms.playWave.value = params2.playWave );\n      folder2.add(params2, 'rainbowX', 0.0, 1.0)\n      .onChange( () =>  materialShader.uniforms.rainbow2Dir.value.x = params2.rainbowX );\n      folder2.add(params2, 'rainbowY', 0.0, 1.0)\n      .onChange( () =>  materialShader.uniforms.rainbow2Dir.value.y = params2.rainbowY );\n      folder2.add(params2, 'rainbowZ', 0.0, 1.0)\n      .onChange( () =>  materialShader.uniforms.rainbow2Dir.value.z = params2.rainbowZ );\n\n      folder.open()\n      folder1.open();\n      folder2.open();\n\n\n      var plane = new THREE.Mesh( geometry, material2 );\n      scene.add( plane );\n      //console.log(material2)\n\n      playVideo(video);\n      initVideoOnce = true;\n    }\n\n    if(materialShader){\n    //  console.log(\"heia\", materialShader);\n      const now = new Date().getTime();\n      materialShader.uniforms.time.value = (now - timeStart) / 1000;\n    }\n\n    // Render the scene\n    renderer.render(scene, camera);\n  }\n\n  render();\n\n\n}\n\n\nfunction playVideo(video){\n  if ( navigator.mediaDevices && navigator.mediaDevices.getUserMedia ) {\n\t\t\t\t\tvar constraints = { video: { width: 1280, height: 720, facingMode: 'user' } };\n\t\t\t\t\tnavigator.mediaDevices.getUserMedia( constraints ).then( function ( stream ) {\n\t\t\t\t\t\t// apply the stream to the video element used in the texture\n\t\t\t\t\t\tvideo.srcObject = stream;\n\t\t\t\t\t\tvideo.play();\n\t\t\t\t\t} ).catch( function ( error ) {\n\t\t\t\t\t\tconsole.error( 'Unable to access the camera/webcam.', error );\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error( 'MediaDevices interface not available.' );\n\t\t\t\t}\n}\n\nexport default init;\n","export default /* glsl */`\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvarying vec3 lightDir;\nvarying vec3 viewDir;\n//varying vec2 vUv;\nuniform float time;\n\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\n\n\tvec3 lightPos = vec3(0.0,0.0,1.0);\n\tvec3 eyePos = vec3(0.0,0.0,1.0);//(viewMatrix * vec4(0.0,0.0,1.0,1.0)).xyz;//cameraPosition;//viewMatrix * vec4(cameraPosition,1.0)).xyz;\n\n\tvec3 viewPos = gl_Position.xyz;\n\tvec3 L = normalize(lightPos - viewPos);\n\tvec3 V = normalize(eyePos- viewPos);\n\tlightDir = L;\n\tviewDir = V;\n\t//vUv = uv;\n}\n`;\n","export default /* glsl */`\n\nvec3 bump3y (vec3 x, vec3 yoffset)\n{\n\tvec3 y = vec3(1.,1.,1.) - x * x;\n\ty = saturate(y-yoffset);\n\treturn y;\n}\n\nvec3 spectral_zucconi (float w)\n{\n\t\t// w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 cs = vec3(3.54541723, 2.86670055, 2.29421995);\n\tconst vec3 xs = vec3(0.69548916, 0.49416934, 0.28269708);\n\tconst vec3 ys = vec3(0.02320775, 0.15936245, 0.53520021);\n\n\treturn bump3y (\tcs * (x - xs), ys);\n}\n\n// --- Spectral Zucconi 6 --------------------------------------------\n\n// Based on GPU Gems\n// Optimised by Alan Zucconi\nvec3 spectral_zucconi6 (float w)\n{\n\t// w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 c1 = vec3(3.54585104, 2.93225262, 2.41593945);\n\tconst vec3 x1 = vec3(0.69549072, 0.49228336, 0.27699880);\n\tconst vec3 y1 = vec3(0.02312639, 0.15225084, 0.52607955);\n\n\tconst vec3 c2 = vec3(3.90307140, 3.21182957, 3.96587128);\n\tconst vec3 x2 = vec3(0.11748627, 0.86755042, 0.66077860);\n\tconst vec3 y2 = vec3(0.84897130, 0.88445281, 0.73949448);\n\n\treturn\n\t\tbump3y(c1 * (x - x1), y1) +\n\t\tbump3y(c2 * (x - x2), y2) ;\n}\n\n\nuniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nuniform float time;\nuniform float size;\nuniform bool playWave;\nuniform bool useOffset;\n\nuniform vec3 rainbow1Dir;\nuniform vec3 rainbow2Dir;\n\nvarying vec3 lightDir;\nvarying vec3 viewDir;\n\nvec2 sineWave(vec2 uv, vec2 phase){\n\tfloat x = sin( 25.0*uv.y + 30.0*uv.x + 6.28*phase.x) * 0.01;\n\tfloat y = sin( 25.0*uv.y + 30.0*uv.x + 6.28*phase.y) * 0.03;\n\treturn vec2(uv.x+x, uv.y+y);\n}\n\nvec2 calculateNewUvs(bool isMaterial2){\n\tvec2 vUv3 = vUv;\n\tif( isMaterial2 ){\n\t\tif(useOffset){\n\t\t\tvUv3.x -= 0.01 * size;\n\t\t}\n\t\tif(playWave){\n\t\t\tvUv3 = sineWave(vUv3, vec2(time,0.0));\n\t\t}\n\t}\n\treturn vUv3;\n}\n\nvec3 calculateRainbow(vec3 uv_tangent){\n\tfloat d = 1600.0; //nm\n\n\tvec3 L = lightDir;\n\tvec3 V = viewDir;\n\n\tvec3 H = L + V;\n\tfloat u = abs(dot(uv_tangent, H));\n\n\tif(u > 0.0){\n\t\t// Calculates the reflection color\n\t\tvec3 reflectionColor = vec3(0.0,0.0,0.0);\n\t\tfor (float n = 1.0; n <= 8.0; n++){\n\t\t\tfloat wavelength = u * d / n;\n\t\t\treflectionColor += spectral_zucconi(wavelength);\n\t\t}\n\t\treflectionColor = saturate(reflectionColor)*(1.0-u);\n\t\treturn reflectionColor;\n\t}\n\treturn vec3(0.0,0.0,0.0);\n}\n\n\n\nvoid main() {\n\t#include <clipping_planes_fragment>\n\n\tfloat nCols = 100.0/size;\n\tbool isMaterial2 = mod(ceil(vUv.x * nCols),2.0) == 0.0;\n\tvec2 vUv3 = calculateNewUvs(isMaterial2);\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tif( isMaterial2 ){\n\t\tdiffuseColor = vec4(1.0,1.0,1.0,opacity);\n\t}\n\n\t#include <logdepthbuf_fragment>\n\n\tvec4 texelColor = texture2D( map, vUv3 );\n\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\n\n\tvec3 reflectionColor;\n\tif(isMaterial2) {\n\t\treflectionColor = calculateRainbow(rainbow2Dir);\n\t}else{\n\t\treflectionColor = calculateRainbow(rainbow1Dir);\n\t}\n\tdiffuseColor.rgb = diffuseColor.rgb + reflectionColor;\n\n\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4(outgoingLight, diffuseColor.a);\n\n\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n`;\n","import React from 'react';\nimport './App.css';\nimport Scene from './scene'\n\nfunction App() {\n\n  Scene();\n\n  return (\n    <div className=\"App\">\n      <video id=\"video\" autoPlay style={{display:'none'}}></video>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}