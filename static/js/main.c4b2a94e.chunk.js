(window.webpackJsonpdigitaltwin=window.webpackJsonpdigitaltwin||[]).push([[0],{11:function(n,e,t){},12:function(n,e,t){},14:function(n,e,t){"use strict";t.r(e);var i=t(1),r=t.n(i),a=t(3),o=t.n(a),c=(t(11),t(12),t(0)),l=t(4),v=(t(13),t(5)),u=!1;var s=function(){var n=new c.k,e=new c.g(75,window.innerWidth/window.innerHeight,.1,1e3);e.position.z=4,new l.a(e);var t,i,r=new c.r({antialias:!0});r.setClearColor("#000000"),r.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(r.domElement);var a=new v.a;!function o(){if(requestAnimationFrame(o),null!=document.getElementById("video")&&!u){i=(new Date).getTime();var l=document.getElementById("video");console.log("video",l);var v=new c.q(l);v.minFilter=c.c,v.magFilter=c.c,v.format=c.j;var s=new c.h(6,4,64),f=new c.f({color:16777215,map:v,side:c.a});f.onBeforeCompile=function(n){n.uniforms.time={value:i},n.uniforms.size={value:1},n.uniforms.playWave={value:!0},n.uniforms.useOffset={value:!0},n.uniforms.rainbow1Dir=new c.n(new c.p(0,0,0)),n.uniforms.rainbow2Dir=new c.n(new c.p(1,0,0)),n.vertexShader="\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvarying vec3 lightDir;\nvarying vec3 viewDir;\n//varying vec2 vUv;\nuniform float time;\n\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\n\n\tvec3 lightPos = vec3(0.0,0.0,1.0);\n\tvec3 eyePos = vec3(0.0,0.0,1.0);//(viewMatrix * vec4(0.0,0.0,1.0,1.0)).xyz;//cameraPosition;//viewMatrix * vec4(cameraPosition,1.0)).xyz;\n\n\tvec3 viewPos = gl_Position.xyz;\n\tvec3 L = normalize(lightPos - viewPos);\n\tvec3 V = normalize(eyePos- viewPos);\n\tlightDir = L;\n\tviewDir = V;\n\t//vUv = uv;\n}\n",n.fragmentShader="\n\nvec3 bump3y (vec3 x, vec3 yoffset)\n{\n\tvec3 y = vec3(1.,1.,1.) - x * x;\n\ty = saturate(y-yoffset);\n\treturn y;\n}\n\nvec3 spectral_zucconi (float w)\n{\n\t\t// w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 cs = vec3(3.54541723, 2.86670055, 2.29421995);\n\tconst vec3 xs = vec3(0.69548916, 0.49416934, 0.28269708);\n\tconst vec3 ys = vec3(0.02320775, 0.15936245, 0.53520021);\n\n\treturn bump3y (\tcs * (x - xs), ys);\n}\n\n// --- Spectral Zucconi 6 --------------------------------------------\n\n// Based on GPU Gems\n// Optimised by Alan Zucconi\nvec3 spectral_zucconi6 (float w)\n{\n\t// w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 c1 = vec3(3.54585104, 2.93225262, 2.41593945);\n\tconst vec3 x1 = vec3(0.69549072, 0.49228336, 0.27699880);\n\tconst vec3 y1 = vec3(0.02312639, 0.15225084, 0.52607955);\n\n\tconst vec3 c2 = vec3(3.90307140, 3.21182957, 3.96587128);\n\tconst vec3 x2 = vec3(0.11748627, 0.86755042, 0.66077860);\n\tconst vec3 y2 = vec3(0.84897130, 0.88445281, 0.73949448);\n\n\treturn\n\t\tbump3y(c1 * (x - x1), y1) +\n\t\tbump3y(c2 * (x - x2), y2) ;\n}\n\n\nuniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nuniform float time;\nuniform float size;\nuniform bool playWave;\nuniform bool useOffset;\n\nuniform vec3 rainbow1Dir;\nuniform vec3 rainbow2Dir;\n\nvarying vec3 lightDir;\nvarying vec3 viewDir;\n\nvec2 sineWave(vec2 uv, vec2 phase){\n\tfloat x = sin( 25.0*uv.y + 30.0*uv.x + 6.28*phase.x) * 0.01;\n\tfloat y = sin( 25.0*uv.y + 30.0*uv.x + 6.28*phase.y) * 0.03;\n\treturn vec2(uv.x+x, uv.y+y);\n}\n\nvec2 calculateNewUvs(bool isMaterial2){\n\tvec2 vUv3 = vUv;\n\tif( isMaterial2 ){\n\t\tif(useOffset){\n\t\t\tvUv3.x -= 0.01 * size;\n\t\t}\n\t\tif(playWave){\n\t\t\tvUv3 = sineWave(vUv3, vec2(time,0.0));\n\t\t}\n\t}\n\treturn vUv3;\n}\n\nvec3 calculateRainbow(vec3 uv_tangent){\n\tfloat d = 1600.0; //nm\n\n\tvec3 L = lightDir;\n\tvec3 V = viewDir;\n\n\tvec3 H = L + V;\n\tfloat u = abs(dot(uv_tangent, H));\n\n\tif(u > 0.0){\n\t\t// Calculates the reflection color\n\t\tvec3 reflectionColor = vec3(0.0,0.0,0.0);\n\t\tfor (float n = 1.0; n <= 8.0; n++){\n\t\t\tfloat wavelength = u * d / n;\n\t\t\treflectionColor += spectral_zucconi(wavelength);\n\t\t}\n\t\treflectionColor = saturate(reflectionColor)*(1.0-u);\n\t\treturn reflectionColor;\n\t}\n\treturn vec3(0.0,0.0,0.0);\n}\n\n\n\nvoid main() {\n\t#include <clipping_planes_fragment>\n\n\tfloat nCols = 100.0/size;\n\tbool isMaterial2 = mod(ceil(vUv.x * nCols),2.0) == 0.0;\n\tvec2 vUv3 = calculateNewUvs(isMaterial2);\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tif( isMaterial2 ){\n\t\tdiffuseColor = vec4(1.0,1.0,1.0,opacity);\n\t}\n\n\t#include <logdepthbuf_fragment>\n\n\tvec4 texelColor = texture2D( map, vUv3 );\n\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\n\n\tvec3 reflectionColor;\n\tif(isMaterial2) {\n\t\treflectionColor = calculateRainbow(rainbow2Dir);\n\t}else{\n\t\treflectionColor = calculateRainbow(rainbow1Dir);\n\t}\n\tdiffuseColor.rgb = diffuseColor.rgb + reflectionColor;\n\n\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4(outgoingLight, diffuseColor.a);\n\n\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",t=n,console.log(t)};var d={useOffset:!0},m={color1:16777215,size:1,playWave:!0,rainbowX:0,rainbowY:0,rainbowZ:0},g={color1:16777215,size:1,playWave:!0,rainbowX:1,rainbowY:0,rainbowZ:0},p=a.addFolder("PROPERTIES"),w=a.addFolder("MATERIAL 1"),_=a.addFolder("MATERIAL 2");p.add(m,"size",0,10).onChange((function(){return t.uniforms.size.value=m.size})),p.add(d,"useOffset").onChange((function(){return t.uniforms.useOffset.value=d.useOffset})),w.addColor(m,"color1"),w.add(m,"rainbowX",0,1).onChange((function(){return t.uniforms.rainbow1Dir.value.x=m.rainbowX})),w.add(m,"rainbowY",0,1).onChange((function(){return t.uniforms.rainbow1Dir.value.y=m.rainbowY})),w.add(m,"rainbowZ",0,1).onChange((function(){return t.uniforms.rainbow1Dir.value.z=m.rainbowZ})),_.addColor(g,"color1").onChange((function(){return f.color.setHex(g.color1)})),_.add(g,"playWave").onChange((function(){return t.uniforms.playWave.value=g.playWave})),_.add(g,"rainbowX",0,1).onChange((function(){return t.uniforms.rainbow2Dir.value.x=g.rainbowX})),_.add(g,"rainbowY",0,1).onChange((function(){return t.uniforms.rainbow2Dir.value.y=g.rainbowY})),_.add(g,"rainbowZ",0,1).onChange((function(){return t.uniforms.rainbow2Dir.value.z=g.rainbowZ})),p.open(),w.open(),_.open();var x=new c.e(s,f);n.add(x),function(n){if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){navigator.mediaDevices.getUserMedia({video:{width:1280,height:720,facingMode:"user"}}).then((function(e){n.srcObject=e,n.play()})).catch((function(n){console.error("Unable to access the camera/webcam.",n)}))}else console.error("MediaDevices interface not available.")}(l),u=!0}if(t){var h=(new Date).getTime();t.uniforms.time.value=(h-i)/1e3}r.render(n,e)}()};var f=function(){return s(),r.a.createElement("div",{className:"App"},r.a.createElement("video",{id:"video",autoPlay:!0,style:{display:"none"}}))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(r.a.createElement(f,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(n){n.unregister()}))},6:function(n,e,t){n.exports=t(14)}},[[6,1,2]]]);
//# sourceMappingURL=main.c4b2a94e.chunk.js.map