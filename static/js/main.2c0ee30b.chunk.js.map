{"version":3,"sources":["images/bumpmap.jpg","images/alpha.jpg","images/alpha2.jpg","customplanegeometry.js","shaders/meshphysical_vert.glsl","shaders/meshphysical_frag.glsl","MaterialFolder.js","MainFolder.js","scene.js","App.js","index.js"],"names":["module","exports","PlaneGeometry","width","height","widthSegments","heightSegments","Geometry","call","this","type","parameters","fromBufferGeometry","PlaneBufferGeometry","mergeVertices","quadSizePros","idx","params","BufferGeometry","ix","iy","width_half","height_half","gridX","Math","floor","gridY","gridX1","gridY1","segment_width","segment_height","indices","vertices","normals","uvs","y","uv","x","push","useOffset","mirrorOffset","mirror","mirrorHalf","a","b","c","d","setIndex","addAttribute","Float32BufferAttribute","prototype","Object","create","constructor","dat","removeFolder","name","folder","__folders","close","__ul","removeChild","domElement","parentNode","onResize","startSettingsMaterial1","stripes","metalness","roughness","ambientIntensity","aoMapIntensity","envMapIntensity","displacementScale","normalScale","color1","playWave","waveSpeed","waveSizeX","waveSizeY","waveFrequency","rainbowX","rainbowY","rainbowZ","blurRadius","blurResX","blurResY","startSettingsMaterial2","MaterialFolder","gui","isMaterial1","settings","console","log","material","materialShader","mainFolder","addFolder","add","onChange","uniforms","size","value","min","max","set","multiplyScalar","addColor","color","setHex","waveSize","rainbow1Dir","z","blurRadius1","blurRes1","folder1","rainbow2Dir","blurRadius2","blurRes2","open","timeStart","letter2","folder2","folder3","folder4","nCols","nColsMask","mask","animationSpeed","MainFolder","resetFunction","initVideoOnce","initalPos","materialShaders","initMaterial1","texture","isMaterial2","getSettings","dismap","THREE","load","bumpimg","bumpmap","alphamap","alphaimg","material1","depthWrite","depthTest","transparent","alphaMap","normalMap","displacementMap","map","side","onBeforeCompile","shader","time","vertexShader","meshphysical_vert","fragmentShader","meshphysical_frag","initShaderProps","init","scene","camera","window","innerWidth","innerHeight","position","renderer","antialias","setClearColor","setSize","document","body","appendChild","render","requestAnimationFrame","getElementById","Date","getTime","video","minFilter","magFilter","format","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","play","catch","error","playVideo","initVideoTexture","getFolder","initProps","remove","material2","numberOfQuads","quadSize","i","geometry","m","plane","translateX","numberOfQuads2","quadSizePros2","quadSize2","material3","material4","alphaimg2","initPlane","light","light2","now","forEach","App","Scene","className","id","autoPlay","style","display","ReactDOM"],"mappings":"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","file":"static/js/main.2c0ee30b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bumpmap.d444e896.jpg\";","module.exports = __webpack_public_path__ + \"static/media/alpha.1c841c4c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/alpha2.3c2e863c.jpg\";","/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nimport { Geometry } from 'three/src/core/Geometry.js';\nimport { BufferGeometry } from 'three/src/core/BufferGeometry.js';\nimport { Float32BufferAttribute } from 'three/src/core/BufferAttribute.js';\n\n// PlaneGeometry\n\nfunction PlaneGeometry(width, height, widthSegments, heightSegments) {\n    Geometry.call(this);\n\n    this.type = 'PlaneGeometry';\n\n    this.parameters = {\n        width: width,\n        height: height,\n        widthSegments: widthSegments,\n        heightSegments: heightSegments\n    };\n\n    this.fromBufferGeometry(\n        new PlaneBufferGeometry(width, height, widthSegments, heightSegments)\n    );\n    this.mergeVertices();\n}\n\nPlaneGeometry.prototype = Object.create(Geometry.prototype);\nPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n// PlaneBufferGeometry\n\nfunction PlaneBufferGeometry(\n    width,\n    height,\n    widthSegments,\n    heightSegments,\n    quadSizePros,\n    idx,\n    params\n) {\n    BufferGeometry.call(this);\n\n    this.type = 'PlaneBufferGeometry';\n\n    this.parameters = {\n        width: width,\n        height: height,\n        widthSegments: widthSegments,\n        heightSegments: heightSegments\n    };\n\n    width = width || 1;\n    height = height || 1;\n\n    var width_half = width / 2;\n    var height_half = height / 2;\n\n    var gridX = Math.floor(widthSegments) || 1;\n    var gridY = Math.floor(heightSegments) || 1;\n\n    var gridX1 = gridX + 1;\n    var gridY1 = gridY + 1;\n\n    var segment_width = width / gridX;\n    var segment_height = height / gridY;\n\n    var ix, iy;\n\n    // buffers\n\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n\n    // generate vertices, normals and uvs\n\n    for (iy = 0; iy < gridY1; iy++) {\n        var y = iy * segment_height - height_half;\n\n        for (ix = 0; ix < gridX1; ix++) {\n            var x = ix * segment_width - width_half;\n\n            vertices.push(x, -y, 0);\n\n            normals.push(0, 0, 1);\n\n            var uv;\n\n            if (idx % 2 === 0 || !params.useOffset) {\n                uv = (ix / gridX) * quadSizePros + idx * quadSizePros;\n            } else {\n                uv =\n                    (ix / gridX) * quadSizePros +\n                    idx * quadSizePros -\n                    quadSizePros;\n                if (params.mirrorOffset) {\n                    uv = idx * quadSizePros - (ix / gridX) * quadSizePros;\n                }\n            }\n            if (params.mirror) {\n                uv = 1 - uv;\n            }\n            if (idx % 2 === 0 && params.mirrorHalf) {\n                uv = 1 - uv;\n            }\n            uvs.push(uv);\n            uvs.push(1 - iy / gridY);\n        }\n    }\n\n    // indices\n\n    for (iy = 0; iy < gridY; iy++) {\n        for (ix = 0; ix < gridX; ix++) {\n            var a = ix + gridX1 * iy;\n            var b = ix + gridX1 * (iy + 1);\n            var c = ix + 1 + gridX1 * (iy + 1);\n            var d = ix + 1 + gridX1 * iy;\n\n            // faces\n\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n        }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));\n}\n\nPlaneBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\nexport { PlaneGeometry, PlaneBufferGeometry };\n","export default \"#define GLSLIFY 1\\n#define STANDARD\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n\\t#ifdef USE_TANGENT\\n\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\n\\t#endif\\n\\n#endif\\n\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n\\n//BIRGITTE\\n\\nvarying vec3 lightDir;\\nvarying vec3 viewDir;\\nuniform float time;\\n\\n//END BIRGITTE\\n\\nvoid main() {\\n\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\n\\n\\tvNormal = normalize( transformedNormal );\\n\\n\\t#ifdef USE_TANGENT\\n\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\n\\t#endif\\n\\n#endif\\n\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvViewPosition = - mvPosition.xyz;\\n\\n\\t//BIRGITTE\\n\\tvec3 lightPos = vec3(0.0,0.0,1.0);\\n\\tvec3 eyePos = vec3(0.0,0.0,1.0);//(viewMatrix * vec4(0.0,0.0,1.0,1.0)).xyz;//cameraPosition;//viewMatrix * vec4(cameraPosition,1.0)).xyz;\\n\\n\\tvec3 viewPos = gl_Position.xyz;\\n\\tvec3 L = normalize(lightPos - viewPos);\\n\\tvec3 V = normalize(eyePos- viewPos);\\n\\tlightDir = L;\\n\\tviewDir = V;\\n\\t//END BIRGITTE\\n\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n\\n}\\n\"","export default \"#define GLSLIFY 1\\n#define STANDARD\\n\\n//BIRGITTE UNIFORMS\\n\\n//Blur\\nuniform float blurRadius1;\\nuniform float blurRadius2;\\nuniform vec2 blurRes1;\\nuniform vec2 blurRes2;\\n\\n//Stripes\\nuniform float size;\\nuniform bool useOffset;\\n\\n//Animation\\nuniform float time;\\nuniform bool playWave;\\nuniform float waveSpeed;\\nuniform float waveFrequency;\\nuniform vec2 waveSize;\\n\\n//Rainbow\\nuniform vec3 rainbow1Dir;\\nuniform vec3 rainbow2Dir;\\nvarying vec3 lightDir;\\nvarying vec3 viewDir;\\n\\n//END BIRGITTE UNIFORMS\\n\\n//BIRGITTE METHODS\\n\\nvec3 bump3y (vec3 x, vec3 yoffset)\\n{\\n\\tvec3 y = vec3(1.,1.,1.) - x * x;\\n\\ty = saturate(y-yoffset);\\n\\treturn y;\\n}\\n\\nvec3 spectral_zucconi (float w)\\n{\\n\\t\\t// w: [400, 700]\\n\\t// x: [0,   1]\\n\\tfloat x = saturate((w - 400.0)/ 300.0);\\n\\n\\tconst vec3 cs = vec3(3.54541723, 2.86670055, 2.29421995);\\n\\tconst vec3 xs = vec3(0.69548916, 0.49416934, 0.28269708);\\n\\tconst vec3 ys = vec3(0.02320775, 0.15936245, 0.53520021);\\n\\n\\treturn bump3y (\\tcs * (x - xs), ys);\\n}\\n\\n// --- Spectral Zucconi 6 --------------------------------------------\\n\\n// Based on GPU Gems\\n// Optimised by Alan Zucconi\\nvec3 spectral_zucconi6 (float w)\\n{\\n\\t// w: [400, 700]\\n\\t// x: [0,   1]\\n\\tfloat x = saturate((w - 400.0)/ 300.0);\\n\\n\\tconst vec3 c1 = vec3(3.54585104, 2.93225262, 2.41593945);\\n\\tconst vec3 x1 = vec3(0.69549072, 0.49228336, 0.27699880);\\n\\tconst vec3 y1 = vec3(0.02312639, 0.15225084, 0.52607955);\\n\\n\\tconst vec3 c2 = vec3(3.90307140, 3.21182957, 3.96587128);\\n\\tconst vec3 x2 = vec3(0.11748627, 0.86755042, 0.66077860);\\n\\tconst vec3 y2 = vec3(0.84897130, 0.88445281, 0.73949448);\\n\\n\\treturn\\n\\t\\tbump3y(c1 * (x - x1), y1) +\\n\\t\\tbump3y(c2 * (x - x2), y2) ;\\n}\\n\\n//START BLUR\\n\\nvec4 blur(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\\n\\tvec4 color = vec4(0.0);\\n  vec2 off1 = vec2(1.411764705882353) * direction;\\n  vec2 off2 = vec2(3.2941176470588234) * direction;\\n  vec2 off3 = vec2(5.176470588235294) * direction;\\n  color += texture2D(image, uv) * 0.1964825501511404;\\n  color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\\n  color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\\n  color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\\n  color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\\n  color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\\n  color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\\n  return color;\\n}\\n\\nvec4 textureWithBlur( bool isMaterial2, vec2 vUv3, sampler2D map){\\n\\tfloat blurRadius;\\n\\tvec2 blurRes;\\n\\tif(isMaterial2){\\n\\t\\tblurRadius = blurRadius2;\\n\\t\\tblurRes = blurRes2;\\n\\t} else{\\n\\t\\tblurRadius = blurRadius1;\\n\\t\\tblurRes = blurRes1;\\n\\t}\\n\\tvec4 texelColor;\\n\\tif(blurRadius > 0.0){\\n\\t\\tvec4 texelColor1 =  blur(map, vUv3, blurRes, vec2(blurRadius, 0.0));\\n\\t\\tvec4 texelColor2 =  blur(map, vUv3, blurRes, vec2(0.0, blurRadius));\\n\\t\\ttexelColor = (texelColor1 + texelColor2)/2.0;\\n\\t}else{\\n\\t\\ttexelColor = texture2D( map, vUv3 );\\n\\t}\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\treturn texelColor;\\n}\\n\\n//END BLUR\\n\\nvec2 sineWave(vec2 uv, vec2 phase){\\n\\tfloat x = sin( waveFrequency*uv.y + waveFrequency*uv.x + 6.28*phase.x) * waveSize.x;\\n\\tfloat y = cos( waveFrequency*uv.y + waveFrequency*uv.x + 6.28*phase.y) * waveSize.y;\\n\\treturn vec2(uv.x+x, uv.y+y);\\n}\\n\\nvec2 calculateNewUvs(vec2 vUv, bool isMaterial2){\\n\\tvec2 vUv3 = vUv;\\n\\tif( isMaterial2 ){\\n\\t\\tif(useOffset){\\n\\t\\t\\tvUv3.x -= 0.01 * size;\\n\\t\\t}\\n\\t}\\n\\telse{\\n\\t\\tif(playWave){\\n\\t\\t\\tvUv3 = sineWave(vUv3, vec2(time* waveSpeed,0.0));\\n\\t\\t}\\n\\t}\\n\\treturn vUv3;\\n}\\n\\nvec3 calculateRainbow(vec3 uv_tangent){\\n\\tfloat d = 2400.0; //nm\\n\\n\\tvec3 L = lightDir;\\n\\tvec3 V = viewDir;\\n\\n\\tvec3 H = L + V;\\n\\tfloat u = abs(dot(uv_tangent, H));\\n\\n\\tif(u > 0.0){\\n\\t\\t// Calculates the reflection color\\n\\t\\tvec3 reflectionColor = vec3(0.0,0.0,0.0);\\n\\t\\tfor (float n = 1.0; n <= 8.0; n++){\\n\\t\\t\\tfloat wavelength = u * d / n;\\n\\t\\t\\treflectionColor += spectral_zucconi(wavelength);\\n\\t\\t}\\n\\t\\treflectionColor = saturate(reflectionColor)*(1.0-u);\\n\\t\\treturn reflectionColor;\\n\\t}\\n\\treturn vec3(0.0,0.0,0.0);\\n}\\n\\n//END BIRGITTE METHODS\\n\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\n\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\n\\nvarying vec3 vViewPosition;\\n\\n#ifndef FLAT_SHADED\\n\\n\\tvarying vec3 vNormal;\\n\\n\\t#ifdef USE_TANGENT\\n\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\n\\t#endif\\n\\n#endif\\n\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n\\n\\t#include <clipping_planes_fragment>\\n\\n\\t//BIRGITTE\\n\\tfloat nCols = 100.0/size;\\n\\tbool isMaterial2 = mod(ceil(vUv.x * nCols),2.0) == 0.0;\\n\\tvec2 vUv3 = calculateNewUvs(vUv,isMaterial2);\\n\\t//END BIRGITTE\\n\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\n\\t#include <logdepthbuf_fragment>\\n\\n\\t//BIRGITTE\\n\\tvec4 texelColor = textureWithBlur(isMaterial2, vUv3, map);\\n\\tdiffuseColor *= texelColor;\\n\\t//END BIRGITTE\\n\\n\\t#include <color_fragment>\\n\\n\\t//BIRGITTE\\n\\n\\tvec3 reflectionColor;\\n\\tif(isMaterial2) {\\n\\t\\treflectionColor = calculateRainbow(rainbow2Dir);\\n\\t}else{\\n\\t\\treflectionColor = calculateRainbow(rainbow1Dir);\\n\\t}\\n\\tdiffuseColor.rgb = diffuseColor.rgb + reflectionColor;\\n\\n\\t//END BIRGITTE\\n\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\n\\t// accumulation\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\n\\t// modulation\\n\\t#include <aomap_fragment>\\n\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\n\\t// this is a stub for the transparency model\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n\\n}\\n\"","import * as dat from 'dat.gui';\n\ndat.GUI.prototype.removeFolder = function(name) {\n    var folder = this.__folders[name];\n    if (!folder) {\n        return;\n    }\n    folder.close();\n    this.__ul.removeChild(folder.domElement.parentNode);\n    delete this.__folders[name];\n    this.onResize();\n};\n\nconst startSettingsMaterial1 ={\n  useOffset: true,\n  stripes: 0.0,\n  metalness: 0.4,\n  roughness: 0.4,\n  ambientIntensity: 0.2,\n  aoMapIntensity: 1.0,\n  envMapIntensity: 1.0,\n  displacementScale: 0.1,\n  normalScale: 0.0,\n  color1: 0xffffff,\n  playWave: false,\n  waveSpeed: 1.0,\n  waveSizeX: 0.0,\n  waveSizeY: 0.0,\n  waveFrequency: 1.0,\n  rainbowX: 0.0,\n  rainbowY: 0.0,\n  rainbowZ: 0.0,\n  blurRadius: 0.0,\n  blurResX: 0.0,\n  blurResY: 0.0\n}\n\nconst startSettingsMaterial2 ={\n  useOffset: true,\n  stripes: 0.0,\n  metalness: 0.0,\n  roughness: 0.0,\n  ambientIntensity: 0.0,\n  aoMapIntensity: 1.0,\n  envMapIntensity: 1.0,\n  displacementScale: 0.0,\n  normalScale: 0.0,\n  color1: 0xffffff,\n  playWave: false,\n  waveSpeed: 1.0,\n  waveSizeX: 0.0,\n  waveSizeY: 0.0,\n  waveFrequency: 1.0,\n  rainbowX: 0.0,\n  rainbowY: 0.0,\n  rainbowZ: 0.0,\n  blurRadius: 0.0,\n  blurResX: 0.0,\n  blurResY: 0.0\n}\n\nclass MaterialFolder {\n    constructor(gui, name, isMaterial1) {\n        this.gui = gui;\n        this.name = name;\n\n        this.settings = isMaterial1 ? startSettingsMaterial1 : startSettingsMaterial2\n        console.log(this.settings)\n\n\n        this.params = {\n            color1: 0xffffff,\n            rainbowX: 0.0,\n            rainbowY: 0.0,\n            rainbowZ: 0.0,\n            blurRadius: 0.0,\n            blurResX: 0.0,\n            blurResY: 0.0\n        };\n    }\n\n    initShaderProps(material, materialShader) {\n        this.gui.removeFolder(this.name);\n        this.mainFolder = this.gui.addFolder(this.name);\n\n        this.mainFolder\n            .add(this.settings, 'stripes', 0.0, 10.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.size.value = this.settings.stripes)\n            );\n\n        this.mainFolder\n            .add(this.settings, 'useOffset')\n            .onChange(\n                () =>\n                    (materialShader.uniforms.useOffset.value = this.settings.useOffset)\n            );\n\n        this.mainFolder\n            .add(this.settings, 'metalness')\n            .min(0)\n            .max(1)\n            .onChange(function(value) {\n                material.metalness = value;\n            });\n\n        this.mainFolder\n            .add(this.settings, 'roughness')\n            .min(0)\n            .max(1)\n            .onChange(function(value) {\n                material.roughness = value;\n            });\n\n        // this.mainFolder.add( this.settings, \"ambientIntensity\" ).min( 0 ).max( 1 ).onChange( function ( value ) {\n        //   ambientLight.intensity = value;\n        // } );\n        this.mainFolder\n            .add(this.settings, 'displacementScale')\n            .min(0)\n            .max(3.0)\n            .onChange(function(value) {\n                material.displacementScale = value;\n            });\n\n        this.mainFolder\n            .add(this.settings, 'normalScale')\n            .min(-1)\n            .max(1)\n            .onChange(function(value) {\n                material.normalScale.set(1, -1).multiplyScalar(value);\n            });\n\n        this.mainFolder\n            .addColor(this.settings, 'color1')\n            .onChange(() => material.color.setHex(this.settings.color1));\n\n        this.mainFolder\n            .add(this.settings, 'playWave')\n            .onChange(\n                () =>\n                    (materialShader.uniforms.playWave.value = this.settings.playWave)\n            );\n\n        this.mainFolder\n            .add(this.settings, 'waveSpeed', 0.0, 5.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.waveSpeed.value = this.settings.waveSpeed)\n            );\n\n        this.mainFolder\n            .add(this.settings, 'waveFrequency', 0.0, 100.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.waveFrequency.value = this.settings.waveFrequency)\n            );\n\n        this.mainFolder\n            .add(this.settings, 'waveSizeX', 0.0, 0.1)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.waveSize.value.x = this.settings.waveSizeX)\n            );\n\n        this.mainFolder\n            .add(this.settings, 'waveSizeY', 0.0, 0.1)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.waveSize.value.y = this.settings.waveSizeY)\n            );\n\n        this.mainFolder\n            .add(this.settings, 'rainbowX', 0.0, 1.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.rainbow1Dir.value.x = this.settings.rainbowX)\n            );\n\n        this.mainFolder\n            .add(this.settings, 'rainbowY', 0.0, 1.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.rainbow1Dir.value.y = this.settings.rainbowY)\n            );\n\n        this.mainFolder\n            .add(this.settings, 'rainbowZ', 0.0, 1.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.rainbow1Dir.value.z = this.settings.rainbowZ)\n            );\n\n        this.mainFolder\n            .add(this.settings, 'blurRadius', 0.0, 5.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.blurRadius1.value = this.settings.blurRadius)\n            );\n\n        this.mainFolder\n            .add(this.settings, 'blurResX', 0.0, 1000.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.blurRes1.value.x = this.settings.blurResX)\n            );\n\n        this.mainFolder\n            .add(this.settings, 'blurResY', 0.0, 1000.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.blurRes1.value.y = this.settings.blurResY)\n            );\n\n        this.folder1 = this.mainFolder.addFolder('STRIPE');\n\n        this.folder1\n            .add(this.params, 'rainbowX', 0.0, 1.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.rainbow2Dir.value.x = this.params.rainbowX)\n            );\n\n        this.folder1\n            .add(this.params, 'rainbowY', 0.0, 1.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.rainbow2Dir.value.y = this.params.rainbowY)\n            );\n\n        this.folder1\n            .add(this.params, 'rainbowZ', 0.0, 1.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.rainbow2Dir.value.z = this.params.rainbowZ)\n            );\n\n        this.folder1\n            .add(this.params, 'blurRadius', 0.0, 5.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.blurRadius2.value = this.params.blurRadius)\n            );\n\n        this.folder1\n            .add(this.params, 'blurResX', 0.0, 1000.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.blurRes2.value.x = this.params.blurResX)\n            );\n\n        this.folder1\n            .add(this.params, 'blurResY', 0.0, 1000.0)\n            .onChange(\n                () =>\n                    (materialShader.uniforms.blurRes2.value.y = this.params.blurResY)\n            );\n\n        this.mainFolder.open();\n    }\n\n    getSettings() {\n        return this.settings;\n    }\n}\n\nexport { MaterialFolder };\n","import * as dat from 'dat.gui';\n\ndat.GUI.prototype.removeFolder = function(name) {\n    var folder = this.__folders[name];\n    if (!folder) {\n        return;\n    }\n    folder.close();\n    this.__ul.removeChild(folder.domElement.parentNode);\n    delete this.__folders[name];\n    this.onResize();\n};\n\nvar params = {\n    nCols: 8,\n    nColsMask: 8,\n    useOffset: false,\n    mirror: false,\n    mirrorHalf: false,\n    mirrorOffset: false,\n    mask: false,\n    animationSpeed: 0\n};\n\nclass MainFolder {\n    constructor(gui, resetFunction) {\n        this.mainFolder = gui.addFolder('MAIN');\n    }\n\n    getFolder() {\n        return this.mainFolder;\n    }\n\n    initProps(resetFunction) {\n        this.mainFolder.add(params, 'nCols', 1, 100, 1).onChange(() => {\n            resetFunction(this.mainFolder, params);\n        });\n        this.mainFolder.add(params, 'nColsMask', 1, 100, 1).onChange(() => {\n            resetFunction(this.mainFolder, params);\n        });\n        this.mainFolder.add(params, 'mirror').onChange(() => {\n            resetFunction(this.mainFolder, params);\n        });\n        resetFunction(this.mainFolder, params);\n        this.mainFolder.add(params, 'mirrorHalf').onChange(() => {\n            resetFunction(this.mainFolder, params);\n        });\n        resetFunction(this.mainFolder, params);\n        this.mainFolder.add(params, 'useOffset').onChange(() => {\n            resetFunction(this.mainFolder, params);\n        });\n        resetFunction(this.mainFolder, params);\n        this.mainFolder.add(params, 'mirrorOffset').onChange(() => {\n            resetFunction(this.mainFolder, params);\n        });\n        this.mainFolder.add(params, 'mask').onChange(() => {\n            resetFunction(this.mainFolder, params);\n        });\n        this.mainFolder.add(params, 'animationSpeed', 0, 5, 0.1);\n\n        this.mainFolder.open();\n    }\n\n    getSettings() {\n        return params;\n    }\n}\n\nexport { MainFolder };\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { PlaneBufferGeometry } from './customplanegeometry.js';\nimport * as dat from 'dat.gui';\nimport meshphysical_vert from './shaders/meshphysical_vert.glsl';\nimport meshphysical_frag from './shaders/meshphysical_frag.glsl';\nimport bumpimg from './images/bumpmap.jpg';\nimport alphaimg from './images/alpha.jpg';\nimport alphaimg2 from './images/alpha2.jpg';\n\nimport { MaterialFolder } from './MaterialFolder';\nimport { MainFolder } from './MainFolder';\n\nlet initVideoOnce = false;\nlet timeStart;\nlet mirror, letter, letter2;\nlet speed = 0.01;\nlet initalPos = 0.0;\nlet materialShaders = [];\n\nconst gui = new dat.GUI();\nlet mainFolder, folder1, folder2, folder3, folder4;\n\nconst init = function() {\n    // ------------------------------------------------\n    // BASIC SETUP\n    // ------------------------------------------------\n\n    // Create an empty scene\n    var scene = new THREE.Scene();\n\n    // Create a basic perspective camera\n    var camera = new THREE.PerspectiveCamera(\n        75,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        1000\n    );\n    camera.position.z = 4;\n    //new OrbitControls(camera);\n\n    // Create a renderer with Antialiasing\n    var renderer = new THREE.WebGLRenderer({ antialias: true });\n\n    // Configure renderer clear color\n    renderer.setClearColor('#000000');\n\n    // Configure renderer size\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n    // Append Renderer to DOM\n    document.body.appendChild(renderer.domElement);\n\n    // ------------------------------------------------\n    // FUN STARTS HERE\n    // ------------------------------------------------\n\n    // Render Loop\n    var render = function() {\n        requestAnimationFrame(render);\n\n        if (document.getElementById('video') != null && !initVideoOnce) {\n            timeStart = new Date().getTime();\n\n            var texture = initVideoTexture();\n            mainFolder = new MainFolder(gui, 'MAIN');\n            folder1 = new MaterialFolder(mainFolder.getFolder(), 'MATERIAL 1', true);\n            folder2 = new MaterialFolder(mainFolder.getFolder(), 'MATERIAL 2', false);\n            folder3 = new MaterialFolder(\n                mainFolder.getFolder(),\n                'MASK MATERIAL 1'\n            );\n            folder4 = new MaterialFolder(\n                mainFolder.getFolder(),\n                'MASK MATERIAL 2'\n            );\n            mainFolder.initProps((mainFolder, params) => {\n                initPlane(texture, mainFolder, scene, params);\n            });\n\n            var light = new THREE.AmbientLight(0xffffff); // soft white light\n            scene.add(light);\n\n            var light2 = new THREE.PointLight(0xffffff, 1, 80);\n            light2.position.set(0, 0, 50);\n            scene.add(light2);\n\n            initVideoOnce = true;\n        }\n        const now = new Date().getTime();\n\n        materialShaders.forEach(shader => {\n            shader.uniforms.time.value = (now - timeStart) / 1000;\n        });\n\n        if (letter2) {\n            if (\n                letter2.position.x - initalPos > 2 ||\n                letter2.position.x - initalPos < -2\n            )\n                mainFolder.getSettings().animationSpeed = -mainFolder.getSettings()\n                    .animationSpeed;\n            letter2.translateX(mainFolder.getSettings().animationSpeed / 100);\n        }\n\n        renderer.render(scene, camera);\n    };\n\n    render();\n};\n\nfunction initPlane(texture, mainFolder, scene, params) {\n    if (mirror) scene.remove(mirror);\n    if (letter2) scene.remove(letter2);\n\n    mirror = new THREE.Object3D();\n\n    var material1 = initMaterial1(timeStart, texture, folder1);\n    var material2 = initMaterial1(timeStart, texture, folder2);\n    material1.transparent = false; // params.mask1;\n    material2.transparent = false; // params.mask1;\n\n    var numberOfQuads = params.nCols;\n    var quadSizePros = 1.0 / numberOfQuads;\n    var planeSize = 6;\n    var quadSize = planeSize * quadSizePros;\n    for (var i = 0; i < numberOfQuads; i++) {\n        //console.log('quadSize', quadSizePros + ' ' + i);\n        var geometry = new PlaneBufferGeometry(\n            quadSize,\n            4,\n            32,\n            32,\n            quadSizePros,\n            i,\n            params\n        );\n        var m = i % 2 == 0 ? material1 : material2;\n        var plane = new THREE.Mesh(geometry, m);\n        plane.translateX(i * quadSize);\n        mirror.add(plane);\n    }\n\n    if (params.mask) {\n        var numberOfQuads2 = params.nColsMask;\n        var quadSizePros2 = 1.0 / numberOfQuads2;\n        var planeSize2 = 6;\n        var quadSize2 = planeSize2 * quadSizePros2;\n\n        var material3 = initMaterial1(timeStart, texture, folder3);\n        var material4 = initMaterial1(timeStart, texture, folder4);\n        var alphamap = new THREE.TextureLoader().load(alphaimg2);\n        material3.alphaMap = alphamap;\n        material4.alphaMap = alphamap;\n        material3.transparent = true;\n        material4.transparent = true;\n\n        letter2 = new THREE.Group();\n\n        for (var i = 0; i < numberOfQuads2; i++) {\n            //console.log('quadSize', quadSizePros2 + ' ' + i);\n            var geometry = new PlaneBufferGeometry(\n                quadSize2,\n                4,\n                32,\n                32,\n                quadSizePros2,\n                i,\n                params\n            );\n            var m = i % 2 == 0 ? material3 : material4;\n            var plane = new THREE.Mesh(geometry, m);\n            plane.translateX(i * quadSize2);\n            letter2.add(plane);\n        }\n        letter2.translateX(-planeSize2 / 2 + quadSize2 / 2);\n        initalPos = letter2.position.x;\n        //mirror.add(letter2);\n        scene.add(letter2);\n    }\n    //new THREE.Box3().setFromObject( letter ).getCenter( letter.position ).multiplyScalar( - 1 );\n\n    mirror.translateX(-planeSize / 2 + quadSize / 2);\n\n    scene.add(mirror);\n}\n\nfunction initVideoTexture() {\n    var video = document.getElementById('video');\n    //console.log('video', video);\n    var texture = new THREE.VideoTexture(video);\n    texture.minFilter = THREE.LinearFilter;\n    texture.magFilter = THREE.LinearFilter;\n    texture.format = THREE.RGBFormat;\n    playVideo(video);\n    return texture;\n}\n\nfunction initMaterial1(timeStart, texture, folder, isMaterial2) {\n    let settings = folder.getSettings();\n    var dismap = new THREE.TextureLoader().load(bumpimg);\n    var bumpmap = new THREE.TextureLoader().load(bumpimg);\n    var alphamap = new THREE.TextureLoader().load(alphaimg);\n    var material1 = new THREE.MeshStandardMaterial({\n        depthWrite: false,\n        depthTest: false,\n        transparent: true,\n        alphaMap: alphamap,\n        normalMap: bumpmap,\n        displacementMap: dismap,\n        displacementScale: settings.displacementScale,\n        metalness: settings.metalness,\n        map: texture,\n        color: 0xffffff,\n        side: THREE.DoubleSide\n    });\n\n    material1.onBeforeCompile = function(shader) {\n\n        shader.uniforms.time = { value: timeStart };\n        shader.uniforms.size = { value: settings.stripes };\n        shader.uniforms.playWave = { value: settings.playWave };\n        shader.uniforms.waveSpeed = { value: settings.waveSpeed };\n        shader.uniforms.waveFrequency = { value: settings.waveFrequency };\n        shader.uniforms.waveSize = new THREE.Uniform(\n            new THREE.Vector2(settings.waveSizeX, settings.waveSizeY)\n        );\n        shader.uniforms.useOffset = { value: settings.useOffset };\n        shader.uniforms.rainbow1Dir = new THREE.Uniform(\n            new THREE.Vector3(\n                settings.rainbowX,\n                settings.rainbowY,\n                settings.rainbowZ\n            )\n        );\n        shader.uniforms.blurRadius1 = { value: settings.blurRadius };\n        shader.uniforms.blurRes1 = new THREE.Uniform(\n            new THREE.Vector2(settings.blurResX, settings.blurResY)\n        );\n\n        shader.vertexShader = meshphysical_vert;\n        shader.fragmentShader = meshphysical_frag;\n\n        materialShaders.push(shader);\n        folder.initShaderProps(material1, shader);\n    };\n\n    return material1;\n}\n\nfunction playVideo(video) {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        var constraints = {\n            video: { width: 1280, height: 720, facingMode: 'user' }\n        };\n        navigator.mediaDevices\n            .getUserMedia(constraints)\n            .then(function(stream) {\n                // apply the stream to the video element used in the texture\n                video.srcObject = stream;\n                video.play();\n            })\n            .catch(function(error) {\n                console.error('Unable to access the camera/webcam.', error);\n            });\n    } else {\n        console.error('MediaDevices interface not available.');\n    }\n}\n\nexport default init;\n","import React from 'react';\nimport './App.css';\nimport Scene from './scene'\n\nfunction App() {\n\n  Scene();\n\n  return (\n    <div className=\"App\">\n      <video id=\"video\" autoPlay style={{display:'none'}}></video>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}